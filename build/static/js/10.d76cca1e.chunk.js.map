{"version":3,"sources":["Components/AppCommon/LotteryWinnerList.js","Components/Home/Winners/index.js","Components/Home/LotteryPicker/index.js","Components/AppCommon/GameInfo.js","Components/AppCommon/PlayersList.js","Components/Home/Players/index.js","Components/Home/index.js"],"names":["LotteryWinnerList","props","ulClass","liClass","winners","react_default","a","createElement","className","classnames","_","winner","key","getPlayerDisplayName","bitsToBtc","won_amount","service_charge","getWinningTypeClass","getWinningTypeIcon","Winners","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","lottery","react","AppCommon_LotteryWinnerList","data","react_router_dom","exact","to","Component","withRouter","connect","auth","authReducer","appStatus","appStatusReducer","lotteryReducer","makeRequest","LotteryPicker","numbers","pickedNumbers","randomPick","bind","assertThisInitialized","handleNumberClick","playLottery","handleSlotCloseEvent","_this2","window","Echo","channel","listen","e","noPick","undefined","setState","setLotteryPickedNumbers","number","index","indexOf","firstEmptyKey","getFirstEmptyPosition","pick","arguments","length","that","theLoop","i","setTimeout","generateRandomLotteryNumber","isAuthenticated","setModal","_this$state","PickedNumbers","handleClick","LotteryNumberList","activeNumbers","onClick","React","setUser","GameInfo","gameStatus","result","timer","days","hours","minutes","seconds","miliSeconds","centiSeconds","deciSeconds","_this$props$lottery","slot","id","setTimer","countDownDate","Date","end_time","getTime","x","setInterval","now","distance","Math","floor","clearInterval","lastSlot","pivot","PlayersList","players","player","Players","total","AppCommon_PlayersList","Home","lotterySlotParticipantsCount","total_participants","Home_Winners","Home_LotteryPicker","AppCommon_GameInfo","Home_Players","withLayout"],"mappings":"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","file":"static/js/10.d76cca1e.chunk.js","sourcesContent":["import React from \"react\";\nimport * as _ from \"lodash\";\nimport * as classnames from \"classnames\";\nimport {\n    getPlayerDisplayName, getWinningTypeClass, getWinningTypeIcon,\n    bitsToBtc\n} from \"../../utils/helper/helperFunctions\";\n\nconst LotteryWinnerList = (props) => {\n    const {ulClass, liClass, winners} = props;\n    return (\n        <ol className={classnames(\"list-group list-group-flush\", ulClass)}>\n            {\n                _.map(winners, (winner, key) => {\n                    return (\n                        <li key={key} className={classnames(\"list-group-item\", liClass)}>\n                            {\n                                winner ?\n                                    <div>\n                                        <span className=\"player-name\">{getPlayerDisplayName(winner)}</span>\n                                        <span className=\"player-lottery-amount\">\n                                            { bitsToBtc(winner.won_amount * 1 + winner.service_charge * 1)}\n                                            <span className={ \"winner-type \" + getWinningTypeClass(winner) }>\n                                                { getWinningTypeIcon(winner) }\n                                            </span>\n                                        </span>\n                                    </div>\n                                    :\n                                    <div className=\"placeholder-div\">\n                                    </div>\n                            }\n                        </li>\n                    );\n                })\n            }\n        </ol>\n    )\n};\n\nexport default LotteryWinnerList;","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport LotteryWinnerList from \"../../AppCommon/LotteryWinnerList\";\n\nclass Winners extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isLoading: true,\n            winners: []\n        }\n    }\n\n    render() {\n        const {winners} = this.props.lottery;\n        return (\n            <Fragment>\n                <div className=\"winners-table card\">\n                    <h4 className=\"card-header\">\n                        Recent Winners\n                    </h4>\n                    <LotteryWinnerList winners={winners.data}/>\n                    <div className=\"card-body\">\n                        <NavLink exact={true} className='card-link'\n                                 to='/winners'>View Past Winners</NavLink>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        lottery: state.lotteryReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest,\n})(Winners));","import React, {Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\nimport {\n    findSetting, generateRandomLotteryNumber, getFirstEmptyPosition,\n    isNumberPickedCorrectly,\n} from \"../../../utils/helper/helperFunctions\";\nimport PickedNumbers from \"../../AppCommon/PickedNumbers\";\nimport {withRouter} from \"react-router-dom\";\nimport {setModal} from \"../../../actions/appStatusAction\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setUser} from \"../../../actions/authActions\";\nimport {setLotteryPickedNumbers} from \"../../../actions/lotteryActions\";\n\nclass LotteryPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numbers: [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n                11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n                21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n                41, 42, 43, 44, 45,\n                // 46, 47, 48, 49, 50,\n                // 51, 52, 53, 54, 55, 56,\n                // 57, 58, 59, 60,\n                // 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n                // 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n                // 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\n                // 91, 92, 93, 94, 95, 96, 97, 98, 99\n            ],\n            pickedNumbers: [],\n        };\n\n        this.randomPick = this.randomPick.bind(this);\n        this.handleNumberClick = this.handleNumberClick.bind(this);\n        this.playLottery = this.playLottery.bind(this);\n        this.handleSlotCloseEvent = this.handleSlotCloseEvent.bind(this);\n    }\n\n    componentWillMount() {\n        window.Echo.channel('lottery')\n            .listen('LotterySlotClosedEvent', (e) => {\n            this.handleSlotCloseEvent();\n        });\n    }\n\n    componentDidMount() {\n        this.randomPick(false);\n    }\n\n    componentWillUnmount() {\n    }\n\n    handleSlotCloseEvent() {\n        let noPick = [undefined, undefined, undefined, undefined, undefined, undefined];\n        this.setState({\n            pickedNumbers: noPick\n        });\n        this.props.setLotteryPickedNumbers(noPick);\n    }\n\n    handleNumberClick(number) {\n        let {pickedNumbers} = this.state;\n\n        let index = pickedNumbers.indexOf(number);\n\n        if (index !== -1) {\n            delete pickedNumbers[index];\n        } else {\n            let firstEmptyKey = getFirstEmptyPosition(pickedNumbers);\n            if (typeof firstEmptyKey === 'number') {\n                pickedNumbers[firstEmptyKey] = number;\n            }\n        }\n\n        this.setState({\n            pickedNumbers: pickedNumbers,\n        });\n        this.props.setLotteryPickedNumbers(pickedNumbers);\n    }\n\n    randomPick(pick = true) {\n        let that = this;\n        (function theLoop(i) {\n            setTimeout(function () {\n                let randomPick = generateRandomLotteryNumber();\n\n                that.setState({\n                    pickedNumbers: randomPick,\n                });\n\n                that.props.setLotteryPickedNumbers(randomPick);\n\n                if (--i) {          // If i > 0, keep going\n                    theLoop(i);       // Call the loop again, and pass it the current value of i\n                } else {\n                    // Reset to blank after random number shuffle\n                    if (! pick) {\n                        let noPick = [undefined, undefined, undefined, undefined, undefined, undefined];\n                        that.setState({\n                            pickedNumbers: noPick\n                        });\n                        that.props.setLotteryPickedNumbers(noPick);\n                    }\n                }\n            }, 150);\n        })(10);\n    }\n\n    playLottery() {\n        const {isAuthenticated} = this.props.auth;\n\n        // check if authenticated\n        if (! isAuthenticated) {\n            this.props.setModal('login');\n            return;\n        }\n\n        this.props.setModal('playLottery');\n    }\n\n    render() {\n        const {numbers, pickedNumbers} = this.state;\n        let firstEmptyKey = getFirstEmptyPosition(pickedNumbers);\n\n        return (\n            <Fragment>\n                <div className=\"lottery-table card focusable\">\n                    <h4 className=\"card-header\">\n                        <span>{ typeof firstEmptyKey !== 'undefined' ? 'Pick Numbers' : 'Picked Numbers' }</span>\n                        <PickedNumbers\n                            liClass=\"picked-number\"\n                            numbers={pickedNumbers}\n                            handleClick={this.handleNumberClick}\n                        />\n                    </h4>\n                    <div className=\"card-body\">\n                        <LotteryNumberList\n                            ulClass=\"lottery-table-numbers\"\n                            liClass=\"lottery-table-number\"\n                            numbers={numbers}\n                            activeNumbers={pickedNumbers}\n                            handleClick={this.handleNumberClick}\n                        />\n                        <div className=\"buttons\">\n                            <button className=\"btn btn-info\" onClick={this.randomPick}>Random Pick</button>\n                            <button className=\"btn btn-primary\" onClick={this.playLottery}>Play Now</button>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    setModal,\n    makeRequest,\n    setUser,\n    setLotteryPickedNumbers\n})(LotteryPicker));","import React, { Component, Fragment } from \"react\";\nimport LotteryNumberList from \"./LotteryNumberList\";\nimport {\n  getPlayerDisplayName,\n  getWinningTypeClass,\n  getWinningTypeIcon,\n  bitsToBtc,\n} from \"../../utils/helper/helperFunctions\";\nimport * as _ from \"lodash\";\n\nclass GameInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      gameStatus: \"\",\n      result: null,\n      timer: {\n        days: \"00\",\n        hours: \"00\",\n        minutes: \"00\",\n        seconds: \"00\",\n        miliSeconds: \"000\",\n        centiSeconds: \"00\",\n        deciSeconds: \"00\",\n      },\n    };\n\n    this.handleNumberClick = this.handleNumberClick.bind(this);\n  }\n\n  componentWillReceiveProps() {\n    const { slot, result } = this.props.lottery;\n    this.setState({\n      slot: slot,\n      result: result,\n    });\n\n    slot && slot.id && this.setTimer();\n  }\n\n  setTimer() {\n    let that = this;\n    const { slot } = this.props.lottery;\n    // Set the date we're counting down to\n    let countDownDate = new Date(slot.end_time).getTime();\n\n    // Update the count down every 1 second\n    let x = setInterval(function () {\n      // Get today's date and time\n      let now = new Date().getTime();\n\n      // Find the distance between now and the count down date\n      let distance = countDownDate - now;\n\n      // Time calculations for days, hours, minutes, seconds and mili seconds\n      let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      let hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n      let miliSeconds = Math.floor(distance % 1000);\n      let centiSeconds = Math.floor(distance % 100);\n      let deciSeconds = Math.floor(distance % 10);\n\n      // set timer values\n      that.setState({\n        timer: {\n          days: days < 10 ? \"0\" + days : days,\n          hours: hours < 10 ? \"0\" + hours : hours,\n          minutes: minutes < 10 ? \"0\" + minutes : minutes,\n          seconds: seconds < 10 ? \"0\" + seconds : seconds,\n          miliSeconds:\n            miliSeconds < 10\n              ? \"00\" + miliSeconds\n              : miliSeconds < 100\n              ? \"0\" + miliSeconds\n              : miliSeconds,\n          centiSeconds: centiSeconds < 10 ? \"0\" + centiSeconds : centiSeconds,\n          deciSeconds: deciSeconds < 10 ? \"0\" + deciSeconds : deciSeconds,\n        },\n      });\n\n      // If the count down is finished, write some text\n      if (distance < 0) {\n        clearInterval(x);\n        that.setState({\n          gameStatus: \"processing\",\n        });\n      } else {\n        that.setState({\n          gameStatus: \"running\",\n        });\n      }\n    }, 1000);\n  }\n\n  handleNumberClick() {}\n\n  render() {\n    const { lastSlot } = this.props.lottery;\n    const { gameStatus, timer } = this.state;\n    return (\n      <Fragment>\n        <div className=\"count-down-table card\">\n          {gameStatus === \"running\" && (\n            <div className=\"card-body\">\n              <h4>Game Closing On</h4>\n              <div className=\"countdown\">\n                <h3 className=\"countdown-text\">\n                  <span>{timer.minutes}</span> : <span>{timer.seconds}</span>\n                  {/*:{\" \"}<span>{timer.centiSeconds}</span>*/}\n                </h3>\n              </div>\n            </div>\n          )}\n          {gameStatus === \"processing\" && (\n            <div className=\"card-body\">\n              <h4>Result Processing ...</h4>\n              <div className=\"countdown\">\n                <h3 className=\"countdown-text\">\n                  <span>00</span> : <span>00</span> : <span>00</span>\n                </h3>\n              </div>\n            </div>\n          )}\n          {lastSlot && lastSlot.id && (\n            <div className=\"card-body\">\n              {lastSlot.winners.length > 0 && gameStatus !== \"processing\" ? (\n                <div className=\"congratulation-note\">\n                  <div className=\"text-center\">\n                    <strong>Congratulation to Winners</strong>\n                  </div>\n                  {_.map(lastSlot.winners, function (winner, key) {\n                    return (\n                      <div key={key} className=\"winner-sec text-center\">\n                        <span>\n                          {getPlayerDisplayName(winner)} :{\" \"}\n                          {bitsToBtc(\n                            winner.pivot.won_amount * 1 +\n                              winner.pivot.service_charge * 1\n                          )}\n                        </span>\n                        <span\n                          className={\n                            \"winner-type \" + getWinningTypeClass(winner)\n                          }\n                        >\n                          {getWinningTypeIcon(winner)}\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div></div>\n              )}\n\n              <div className=\"countdown\">\n                <h5 className=\"counter-title text-center\">\n                  {gameStatus === \"processing\"\n                    ? \"Getting Result ...\"\n                    : \"Last Game Result\"}\n                </h5>\n                <LotteryNumberList\n                  ulClass=\"lottery-table-numbers result\"\n                  liClass=\"lottery-table-number\"\n                  numbers={\n                    gameStatus === \"processing\"\n                      ? [\"\", \"\", \"\", \"\", \"\", \"\"]\n                      : lastSlot.result\n                  }\n                  activeNumbers={lastSlot.result}\n                  handleClick={this.handleNumberClick}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default GameInfo;\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport * as classnames from \"classnames\";\nimport {getPlayerDisplayName} from \"../../utils/helper/helperFunctions\";\n\nconst PlayersList = (props) => {\n    const {ulClass, liClass, players} = props;\n    return (\n        <ul className={classnames(\"players-list\", ulClass)}>\n            {\n                _.map(players, (player, key) => {\n                    return (\n                        <li key={key} className={classnames(liClass)}>\n                            {\n                                player ?\n                                    <div>\n                                        <span className=\"player-name\">{getPlayerDisplayName(player)} <small>joined the Game.</small></span>\n                                    </div>\n                                    :\n                                    <div className=\"placeholder-div-sm\">\n                                    </div>\n                            }\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    )\n};\n\nexport default PlayersList;","import React, {Fragment} from 'react';\n\nimport PlayersList from \"../../AppCommon/PlayersList\";\n\nconst Players = (props) => {\n    const {players, total} = props;\n    return (\n        <Fragment>\n            <div className=\"wining-numbers-table card\">\n                <div className=\"card-body\">\n                    <h4>Active Players : {total}</h4>\n                    <PlayersList players={players}/>\n                </div>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default Players;\n","import React, {Component, Fragment} from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport Winners from \"./Winners\";\nimport LotteryPicker from \"./LotteryPicker\";\nimport GameInfo from \"../../Components/AppCommon/GameInfo\";\nimport Players from \"./Players\";\nimport withLayout from \"../HOC/withLayout\";\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const {slot, players} = this.props.lottery;\n        const lotterySlotParticipantsCount = slot && slot.total_participants;\n        return (\n            <div className=\"section-bottom\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-md-5 col-lg-4\">\n                            <Winners/>\n                        </div>\n                        <div className=\"col-sm-12 col-md-7 col-lg-5\">\n                            <LotteryPicker/>\n                        </div>\n                        <div className=\"col-sm-12 col-md-12 col-lg-3\">\n                            <GameInfo lottery={this.props.lottery} auth={this.props.auth}/>\n                            <Players players={players.data} total={lotterySlotParticipantsCount}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withLayout(Home);"],"sourceRoot":""}