{"version":3,"sources":["Components/AppCommon/AnimatedSection.js","Components/Page/ContactUs.js","Components/Page/PastWinners.js","Components/Page/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_addons_css_transition_group__WEBPACK_IMPORTED_MODULE_1__","react_addons_css_transition_group__WEBPACK_IMPORTED_MODULE_1___default","AnimatedSection","props","a","createElement","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","children","ContactUs","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","email","subject","message","captchaResponse","errors","response","isLoading","handleChange","bind","assertThisInitialized","resetErrors","handleSubmit","nextProps","match","params","slug","bootstrap","_this2","setState","page","makeRequest","request","Pages","show","MESSAGES","LOGGING","then","res","data","setPage","errorData","e","defineProperty","target","value","event","values","_this3","push","length","captcha_response","ContactFormEntry","create","responseData","form","reset","reCaptcha","_this4","_this$state","react_default","className","success","lib","onSubmit","ref","c","Row","FormGroup","type","placeholder","onChange","validate","required","errorMessage","rows","esm","sitekey","getEnv","indexOf","Button","Component","PastWinners","pages","perPage","reactTableState","fetchData","query","arguments","undefined","sorted","id","desc","pageSize","filtered","Lottery","slots","winners","meta","last_page","selectedIds","react","es","columns","Header","accessor","Cell","getPlayerDisplayName","original","LotteryNumberList","ulClass","numbers","lottery_slot","result","activeNumbers","lottery_number","bitsToBtc","won_amount","service_charge","getWinningTypeClass","getWinningTypeIcon","defaultPageSize","showPagination","manual","loading","onFetchData","filterable","sortable","React","Page","playLottery","auth","isAuthenticated","setModal","history","currentPage","getBySlug","Page_ContactUs","Page_PastWinners","title","dangerouslySetInnerHTML","__html","sanitize","content","withLayout"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAgBeE,IAbS,SAACC,GACrB,OACIL,EAAAM,EAAAC,cAACJ,EAAAG,EAAD,CACIE,eAAe,mBACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,iBAAiB,GACfP,EAAMQ,qNC6NLC,cA9NX,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KAEDiB,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,gBAAiB,GACjBC,OAAQ,GACRC,SAAU,GACVC,WAAW,GAGff,EAAKgB,aAAehB,EAAKgB,aAAaC,KAAlBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KACpBA,EAAKmB,YAAcnB,EAAKmB,YAAYF,KAAjBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KACnBA,EAAKoB,aAAepB,EAAKoB,aAAaH,KAAlBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAhBLA,yFAmBOqB,GAClBlB,KAAKb,MAAMgC,MAAMC,OAAOC,OAASH,EAAUC,MAAMC,OAAOC,MACxDrB,KAAKsB,UAAUJ,EAAUC,MAAMC,OAAOC,kDAK1CrB,KAAKsB,UAAUtB,KAAKb,MAAMgC,MAAMC,OAAOC,wCAGjCA,GAAM,IAAAE,EAAAvB,KAEZA,KAAKwB,SAAS,CAACZ,WAAW,IAEpBZ,KAAKb,MAAMsC,KAAKJ,IAClBrB,KAAKb,MAAMuC,YAAYC,IAAQC,MAAMC,KAAM,CAACR,KAAMA,GAAQ,CAACb,QAASsB,IAASC,UAAUC,KACnF,SAACC,GAAcA,EAAIC,OAAQX,EAAKpC,MAAMgD,QAAQF,GAAMV,EAAKC,SAAS,CAACZ,WAAW,MAC9E,SAACwB,2CAKAC,GACQ,kBAANA,EAOXrC,KAAKwB,SAAL1B,OAAAwC,EAAA,EAAAxC,CAAA,GACKuC,EAAEE,OAAOlC,KAAOgC,EAAEE,OAAOC,QAP1BxC,KAAKwB,SAAS,CACVf,gBAAiB4B,yCAUhBI,EAAO/B,EAAQgC,GAAQ,IAAAC,EAAA3C,KAKhC,GAJMA,KAAKI,MAAMK,iBACbC,EAAOkC,KAAK,mBAGZlC,EAAOmC,OAAS,EAChB7C,KAAKwB,SAAS,CAACd,OAAQA,QAD3B,CAKA,IAAMwB,EAAO,CACT7B,KAAML,KAAKI,MAAMC,KACjBC,MAAON,KAAKI,MAAME,MAClBC,QAASP,KAAKI,MAAMG,QACpBC,QAASR,KAAKI,MAAMI,QACpBsC,iBAAkB9C,KAAKI,MAAMK,iBAGjCT,KAAKwB,SAAS,CAACZ,WAAW,IAC1BZ,KAAKb,MAAMuC,YAAYC,IAAQoB,iBAAiBC,OAAQd,EAAM,CAAC1B,QAASsB,IAASC,UAAUC,KACvF,SAACiB,GACGN,EAAKnB,SAAS,CACVb,SAAUsC,IAEdN,EAAKO,KAAKC,QACVR,EAAKS,UAAUD,QACfR,EAAK3B,eAET,SAACoB,GACGO,EAAKnB,SAAS,CACVb,SAAUyB,IAEdO,EAAKS,UAAUD,iDAMvBnD,KAAKwB,SAAS,CACVd,OAAQ,sCAIP,IAAA2C,EAAArD,KAAAsD,EACqDtD,KAAKI,MAAxDC,EADFiD,EACEjD,KAAMC,EADRgD,EACQhD,MAAOC,EADf+C,EACe/C,QAASC,EADxB8C,EACwB9C,QAASG,EADjC2C,EACiC3C,SAAUD,EAD3C4C,EAC2C5C,OAChD,OACI6C,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,kBACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,OACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,sBACXD,EAAAnE,EAAAC,cAAA,wBACAkE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,WACXD,EAAAnE,EAAAC,cAAA,WACMsB,EAASD,QAAU6C,EAAAnE,EAAAC,cAAA,KAAGmE,UAAU,eAAb,oCACnB7C,EAAS8C,SAAWF,EAAAnE,EAAAC,cAAA,KAAGmE,UAAU,gBAAb,oCAEtBD,EAAAnE,EAAAC,cAAA,WACIkE,EAAAnE,EAAAC,cAACqE,EAAA,OAAD,CAAQC,SAAU3D,KAAKiB,aAAc2C,IAAK,SAAAC,GAAC,OAAKR,EAAKH,KAAOW,IACxDN,EAAAnE,EAAAC,cAACyE,EAAA,EAAD,CAAKZ,MAAI,GACLK,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,wBACXD,EAAAnE,EAAAC,cAAC0E,EAAA,EAAD,KACIR,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,KACIH,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,CAASrD,KAAK,OACL2D,KAAK,OACLC,YAAY,gBACZC,SAAUlE,KAAKa,aACf2B,MAAOnC,EACP8D,SAAU,CACNC,SAAU,CACN5B,OAAO,EACP6B,aAAc,6BAI/Bd,EAAAnE,EAAAC,cAACqE,EAAA,WAAD,QAGRH,EAAAnE,EAAAC,cAAC0E,EAAA,EAAD,KACIR,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,KACIH,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,CAASrD,KAAK,QACL2D,KAAK,QACLC,YAAY,YACZC,SAAUlE,KAAKa,aACf2B,MAAOlC,EACP6D,SAAU,CACN7D,MAAO,CACHkC,OAAO,EACP6B,aAAc,sCAElBD,SAAU,CACN5B,OAAO,EACP6B,aAAc,oCAI/Bd,EAAAnE,EAAAC,cAACqE,EAAA,WAAD,QAIRH,EAAAnE,EAAAC,cAAC0E,EAAA,EAAD,KACIR,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,KACIH,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,CAASrD,KAAK,UACL2D,KAAK,OACLC,YAAY,cACZC,SAAUlE,KAAKa,aACf2B,MAAOjC,EACP4D,SAAU,CACNC,SAAU,CACN5B,OAAO,EACP6B,aAAc,oCAI/Bd,EAAAnE,EAAAC,cAACqE,EAAA,WAAD,SAKZH,EAAAnE,EAAAC,cAAC0E,EAAA,EAAD,KACIR,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,KACIH,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,CAASrD,KAAK,UACL2D,KAAK,WACLC,YAAY,cACZC,SAAUlE,KAAKa,aACf2B,MAAOhC,EACP8D,KAAM,GACNH,SAAU,CACNC,SAAU,CACN5B,OAAO,EACP6B,aAAc,oCAI/Bd,EAAAnE,EAAAC,cAACqE,EAAA,WAAD,QAGRH,EAAAnE,EAAAC,cAAC0E,EAAA,EAAD,KACIR,EAAAnE,EAAAC,cAACqE,EAAA,QAAD,KACIH,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,yBACXD,EAAAnE,EAAAC,cAACkF,EAAA,EAAD,CACIC,QAAUC,YAAO,sBACjBP,SAAUlE,KAAKa,aACf+C,IAAK,SAAAC,GAAC,OAAKR,EAAKD,UAAYS,MAGS,IAAvCnD,EAAOgE,QAAQ,oBAA8BnB,EAAAnE,EAAAC,cAAA,QAAMmE,UAAU,eAAhB,kCAM/DD,EAAAnE,EAAAC,cAACsF,EAAA,EAAD,CAAQnB,UAAU,aAAlB,8BA/MxBoB,iDCyLTC,cApLX,SAAAA,EAAY1F,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6E,IACfhF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+E,GAAA1E,KAAAH,KAAMb,KAEDiB,MAAQ,CACT8B,KAAM,GACN4C,MAAO,EACPC,QAAS,GACTC,gBAAiB,GACjBpE,WAAW,GAGff,EAAKoF,UAAYpF,EAAKoF,UAAUnE,KAAfhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAXFA,yEAcTO,GAAwB,IAAAmB,EAAAvB,KAC1BkF,GAD0BC,UAAAtC,OAAA,QAAAuC,IAAAD,UAAA,IAAAA,UAAA,GAClB,IACZnF,KAAKwB,SAAS,CAACwD,gBAAiB5E,IAG5BJ,KAAKI,MAAMQ,YAKXR,EAAMqB,OACNyD,GAAS,UAAY9E,EAAMqB,KAAO,IAIlCrB,EAAMiF,OAAOxC,OAAS,IACtBqC,GAAS,YAAc9E,EAAMiF,OAAO,GAAGC,GACvCJ,GAAS,eAAiB9E,EAAMiF,OAAO,GAAGE,KAAO,QAAU,SAI3DnF,EAAMoF,WACNN,GAAS,UAAY9E,EAAMoF,UAI3BpF,EAAMqF,SAAS5C,OAAS,GAAKzC,EAAMqF,SAAS,GAAGjD,MAAMK,OAAS,IAK9DzC,EAAMqF,SAAS5C,OAAS,GAAKzC,EAAMqF,SAAS,GAAGjD,MAAMK,OAAS,IAC9DqC,GAAS,IAAM9E,EAAMqF,SAAS,GAAGH,GAAK,IAAMlF,EAAMqF,SAAS,GAAGjD,OAIlExC,KAAKwB,SAAS,CAACZ,WAAW,IAE1BZ,KAAKb,MAAMuC,YAAYC,IAAQ+D,QAAQC,MAAMC,QAAS,CAACV,MAAOA,GAAQ,CAAC1E,QAASsB,IAASC,UAAUC,KAC/F,SAACiB,GACOA,EAAaf,KACbX,EAAKC,SAAS,CACVU,KAAMe,EAAaf,KACnB4C,MAAO7B,EAAa4C,KAAKC,UACzBlF,WAAW,EACXmF,YAAa,KAGjBxE,EAAKC,SAAS,CACVU,KAAM,GACN4C,MAAO,EACPlE,WAAW,EACXmF,YAAa,MAIzB,SAAC3D,GACGb,EAAKC,SAAS,CAACZ,WAAW,yCAK7B,IAAA0C,EAC4BtD,KAAKI,MAA/B8B,EADFoB,EACEpB,KAAM4C,EADRxB,EACQwB,MAAOlE,EADf0C,EACe1C,UACpB,OACI2C,EAAAnE,EAAAC,cAAC2G,EAAA,SAAD,KACIzC,EAAAnE,EAAAC,cAACH,EAAA,EAAD,KACIqE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,kBACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,OACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aACXD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,wCACXD,EAAAnE,EAAAC,cAAA,0BACAkE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,wBAERtB,EACKqB,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,WACXD,EAAAnE,EAAAC,cAAC4G,EAAA,EAAD,CACI/D,KAAMA,EACNgE,QAAS,CACL,CACIA,QAAS,CACL,CACIC,OAAQ,OACRC,SAAU,cAEd,CACID,OAAQ,OACRC,SAAU,YACVC,KAAM,SAAAlH,GAAK,OACPoE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,2BACXD,EAAAnE,EAAAC,cAAA,YACKiH,YAAqBnH,EAAMoH,cAK5C,CACIJ,OAAQ,SACRC,SAAU,iBACVC,KAAM,SAAAlH,GAAK,OACPoE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,6BACXD,EAAAnE,EAAAC,cAACmH,EAAA,EAAD,CACIC,QAAQ,mBACRC,QAASvH,EAAMoH,SAASI,aAAaC,OACrCC,cAAe1H,EAAMoH,SAASI,aAAaC,YAK3D,CACIT,OAAQ,iBACRC,SAAU,iBACVC,KAAM,SAAAlH,GAAK,OACPoE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,6BACXD,EAAAnE,EAAAC,cAACmH,EAAA,EAAD,CACIC,QAAQ,mBACRC,QAASvH,EAAMoH,SAASO,eACxBD,cAAe1H,EAAMoH,SAASI,aAAaC,YAK3D,CACIT,OAAQ,aACRC,SAAU,aACVC,KAAM,SAAAlH,GAAK,OACPoE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,4BACXD,EAAAnE,EAAAC,cAAA,YACM0H,YAAsC,EAA5B5H,EAAMoH,SAASS,WAAiD,EAAhC7H,EAAMoH,SAASU,iBAE/D1D,EAAAnE,EAAAC,cAAA,QAAMmE,UAAY,eAAiB0D,YAAoB/H,EAAMoH,WACvDY,YAAmBhI,EAAMoH,iBAQvDa,gBAAiB,GACjBC,gBAAgB,EAChB7D,UAAU,sBACV8D,QAAM,EACNxC,MAAOA,EACPyC,QAAS3G,EACT4G,YAAaxH,KAAKiF,UAClBwC,YAAY,EACZC,UAAU,KAIlBnE,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aAAf,qCAvK1BmE,IAAM/C,WCA1BgD,cACJ,SAAAA,EAAYzI,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4H,IACjB/H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8H,GAAAzH,KAAAH,KAAMb,KAEDiB,MAAQ,CACXQ,WAAW,GAGbf,EAAKgI,YAAchI,EAAKgI,YAAY/G,KAAjBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAPFA,yFAUOqB,GACpBlB,KAAKb,MAAMgC,MAAMC,OAAOC,OAASH,EAAUC,MAAMC,OAAOC,MAC1DrB,KAAKsB,UAAUJ,EAAUC,MAAMC,OAAOC,kDAKxCrB,KAAKsB,UAAUtB,KAAKb,MAAMgC,MAAMC,OAAOC,wCAG/BA,GAAM,IAAAE,EAAAvB,KAEdA,KAAKwB,SAAS,CAAEZ,WAAW,IAEd,YAATS,GAA+B,YAATA,IAIrBrB,KAAKb,MAAMsC,KAAKJ,IACnBrB,KAAKb,MACFuC,YACCC,IAAQC,MAAMC,KACd,CAAER,KAAMA,GACR,CAAEb,QAASsB,IAASC,UAErBC,KACC,SAACC,GACKA,EAAIC,OACNX,EAAKpC,MAAMgD,QAAQF,GACnBV,EAAKC,SAAS,CAAEZ,WAAW,MAG/B,SAACwB,6CAMqBpC,KAAKb,MAAM2I,KAA/BC,iBAQR/H,KAAKb,MAAM6I,SAAS,eAEpBhI,KAAKb,MAAM8I,QAAQrF,KAAK,MANtB5C,KAAKb,MAAM6I,SAAS,0CASf,IACC3G,EAASrB,KAAKb,MAAMgC,MAAMC,OAA1BC,KACAyD,EAAU9E,KAAKb,MAAMsC,KAArBqD,MACFoD,EAAcC,YAAUrD,EAAOzD,GACrC,OACEkC,EAAAnE,EAAAC,cAAC2G,EAAA,SAAD,KACY,YAAT3E,GAAsBkC,EAAAnE,EAAAC,cAAC+I,EAAcpI,KAAKb,OAEjC,YAATkC,GAAsBkC,EAAAnE,EAAAC,cAACgJ,EAAgBrI,KAAKb,OAEnC,YAATkC,GAA+B,YAATA,GACrBkC,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,kBACbD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aACbD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,OACbD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,aACbD,EAAAnE,EAAAC,cAAA,OAAKmE,UAAU,sBACbD,EAAAnE,EAAAC,cAAA,UAAK6I,EAAYI,OACjB/E,EAAAnE,EAAAC,cAAA,OACEkJ,wBAAyB,CACvBC,OAAQC,mBAASP,EAAYQ,yBAjFlC9D,aA6GJ+D,sBAAWf","file":"static/js/8.692edb2a.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nconst AnimatedSection = (props) =>  {\n    return (\n        <ReactCSSTransitionGroup\n            transitionName=\"animated-section\"\n            transitionAppear={true}\n            transitionAppearTimeout={500}\n            transitionEnter={false}\n            transitionLeave={false}>\n            { props.children }\n        </ReactCSSTransitionGroup>\n    )\n};\n\nexport default AnimatedSection;","import React, {Component} from 'react'\nimport 'react-table/react-table.css'\nimport request from \"../../services/request\";\nimport {MESSAGES} from \"../../constants/messages\";\nimport {AvFeedback, AvField, AvForm, AvGroup} from \"availity-reactstrap-validation\";\nimport {Button, FormGroup, Row} from \"reactstrap\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport {getEnv} from \"../../utils/helper/helperFunctions\";\n\nclass ContactUs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: \"\",\n            email: \"\",\n            subject: \"\",\n            message: \"\",\n            captchaResponse: \"\",\n            errors: [],\n            response: {},\n            isLoading: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.resetErrors = this.resetErrors.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.match.params.slug !== nextProps.match.params.slug) {\n            this.bootstrap(nextProps.match.params.slug);\n        }\n    }\n\n    componentDidMount() {\n        this.bootstrap(this.props.match.params.slug);\n    }\n\n    bootstrap(slug) {\n        // Get Page\n        this.setState({isLoading: true});\n\n        if (! this.props.page[slug]) {\n            this.props.makeRequest(request.Pages.show, {slug: slug }, {message: MESSAGES.LOGGING}).then(\n                (res) => { if (res.data) { this.props.setPage(res); this.setState({isLoading: false}); } },\n                (errorData) => {}\n            );\n        }\n    }\n\n    handleChange(e) {\n        if (typeof e === 'string') {\n            this.setState({\n                captchaResponse: e\n            });\n            return;\n        }\n\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleSubmit(event, errors, values) {\n        if (! this.state.captchaResponse) {\n            errors.push('captchaResponse');\n        }\n\n        if (errors.length > 0) {\n            this.setState({errors: errors});\n            return;\n        }\n\n        const data = {\n            name: this.state.name,\n            email: this.state.email,\n            subject: this.state.subject,\n            message: this.state.message,\n            captcha_response: this.state.captchaResponse\n        };\n\n        this.setState({isLoading: true});\n        this.props.makeRequest(request.ContactFormEntry.create, data, {message: MESSAGES.LOGGING}).then(\n            (responseData) => {\n                this.setState({\n                    response: responseData\n                });\n                this.form.reset();\n                this.reCaptcha.reset();\n                this.resetErrors();\n            },\n            (errorData) => {\n                this.setState({\n                    response: errorData\n                });\n                this.reCaptcha.reset();\n            }\n        );\n    }\n\n    resetErrors() {\n        this.setState({\n            errors: []\n        })\n    }\n\n    render() {\n        const {name, email, subject, message, response, errors} = this.state;\n        return (\n            <div className=\"section-bottom\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div className=\"inner-content-wrap\">\n                                <h2>Contact Us</h2>\n                                <div className=\"content\">\n                                    <div>\n                                        { response.errors && <p className=\"text-danger\">Something went wrong. Try Again!</p>}\n                                        { response.success && <p className=\"text-success\">Form was submitted successfully.</p>}\n\n                                        <div>\n                                            <AvForm onSubmit={this.handleSubmit} ref={c => (this.form = c)}>\n                                                <Row form>\n                                                    <div className=\"forminline is-inline\">\n                                                        <FormGroup>\n                                                            <AvGroup>\n                                                                <AvField name=\"name\"\n                                                                         type=\"text\"\n                                                                         placeholder=\"Full Name ...\"\n                                                                         onChange={this.handleChange}\n                                                                         value={name}\n                                                                         validate={{\n                                                                             required: {\n                                                                                 value: true,\n                                                                                 errorMessage: 'Please enter your name'\n                                                                             }\n                                                                         }}\n                                                                />\n                                                                <AvFeedback/>\n                                                            </AvGroup>\n                                                        </FormGroup>\n                                                        <FormGroup>\n                                                            <AvGroup>\n                                                                <AvField name=\"email\"\n                                                                         type=\"email\"\n                                                                         placeholder=\"Email ...\"\n                                                                         onChange={this.handleChange}\n                                                                         value={email}\n                                                                         validate={{\n                                                                             email: {\n                                                                                 value: true,\n                                                                                 errorMessage: 'Please enter a valid email address'\n                                                                             },\n                                                                             required: {\n                                                                                 value: true,\n                                                                                 errorMessage: 'Please enter an email address'\n                                                                             }\n                                                                         }}\n                                                                />\n                                                                <AvFeedback/>\n                                                            </AvGroup>\n                                                        </FormGroup>\n\n                                                        <FormGroup>\n                                                            <AvGroup>\n                                                                <AvField name=\"subject\"\n                                                                         type=\"text\"\n                                                                         placeholder=\"Subject ...\"\n                                                                         onChange={this.handleChange}\n                                                                         value={subject}\n                                                                         validate={{\n                                                                             required: {\n                                                                                 value: true,\n                                                                                 errorMessage: 'Please enter your subject ...'\n                                                                             }\n                                                                         }}\n                                                                />\n                                                                <AvFeedback/>\n                                                            </AvGroup>\n                                                        </FormGroup>\n                                                    </div>\n\n                                                    <FormGroup>\n                                                        <AvGroup>\n                                                            <AvField name=\"message\"\n                                                                     type=\"textarea\"\n                                                                     placeholder=\"Message ...\"\n                                                                     onChange={this.handleChange}\n                                                                     value={message}\n                                                                     rows={10}\n                                                                     validate={{\n                                                                         required: {\n                                                                             value: true,\n                                                                             errorMessage: 'Please enter your message ...'\n                                                                         }\n                                                                     }}\n                                                            />\n                                                            <AvFeedback/>\n                                                        </AvGroup>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <AvGroup>\n                                                            <div className=\"form-group re-captcha\">\n                                                                <ReCAPTCHA\n                                                                    sitekey={ getEnv('RECAPTCHA_SITE_KEY')}\n                                                                    onChange={this.handleChange}\n                                                                    ref={c => (this.reCaptcha = c)}\n                                                                />\n\n                                                                {(errors.indexOf('captchaResponse') !== -1) && <span className=\"text-danger\">Re-captcha must be solved.</span>}\n                                                            </div>\n                                                        </AvGroup>\n                                                    </FormGroup>\n                                                </Row>\n\n                                                <Button className=\"popup-btn\">Contact Us</Button>\n\n                                            </AvForm>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ContactUs;","import React, {Fragment} from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\nimport request from \"../../services/request\";\nimport {MESSAGES} from \"../../constants/messages\";\nimport AnimatedSection from \"../AppCommon/AnimatedSection\";\nimport {\n    getPlayerDisplayName, getWinningTypeClass, getWinningTypeIcon,\n    bitsToBtc\n} from \"../../utils/helper/helperFunctions\";\nimport LotteryNumberList from \"../AppCommon/LotteryNumberList\";\n\nclass PastWinners extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            pages: 1,\n            perPage: 10,\n            reactTableState: {},\n            isLoading: false\n        };\n\n        this.fetchData = this.fetchData.bind(this);\n    }\n\n    fetchData(state, instance = null) {\n        let query = \"\";\n        this.setState({reactTableState: state});\n\n        //If fetchData is already running, return\n        if (this.state.isLoading) {\n            return;\n        }\n\n        // Go to page\n        if (state.page) {\n            query += \"&page=\" + (state.page + 1);\n        }\n\n        // Sorting\n        if (state.sorted.length > 0) {\n            query += \"&orderBy=\" + state.sorted[0].id;\n            query += \"&ascending=\" + (state.sorted[0].desc ? \"false\" : \"true\");\n        }\n\n        // Limit\n        if (state.pageSize) {\n            query += \"&limit=\" + state.pageSize;\n        }\n\n        // if filter is on and doesn't have at least 2 characters, abort\n        if (state.filtered.length > 0 && state.filtered[0].value.length < 2) {\n            return;\n        }\n\n        // filter only after having at least 2 characters\n        if (state.filtered.length > 0 && state.filtered[0].value.length > 1) {\n            query += \"&\" + state.filtered[0].id + \"=\" + state.filtered[0].value\n        }\n\n        // Start loading indicator and call api\n        this.setState({isLoading: true});\n\n        this.props.makeRequest(request.Lottery.slots.winners, {query: query}, {message: MESSAGES.LOGGING}).then(\n            (responseData) => {\n                if (responseData.data) {\n                    this.setState({\n                        data: responseData.data,\n                        pages: responseData.meta.last_page,\n                        isLoading: false,\n                        selectedIds: []\n                    });\n                } else {\n                    this.setState({\n                        data: [],\n                        pages: 0,\n                        isLoading: false,\n                        selectedIds: []\n                    });\n                }\n            },\n            (errorData) => {\n                this.setState({isLoading: false});\n            }\n        );\n    }\n\n    render() {\n        const {data, pages, isLoading} = this.state;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"section-bottom\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-12\">\n                                    <div className=\"inner-content-wrap  responsive-width\">\n                                        <h2>Past Winners</h2>\n                                        <div className=\"content past-winners\">\n                                            {\n                                               data ?\n                                                    <div className=\"content\">\n                                                        <ReactTable\n                                                            data={data}\n                                                            columns={[\n                                                                {\n                                                                    columns: [\n                                                                        {\n                                                                            Header: 'Date',\n                                                                            accessor: 'updated_at',\n                                                                        },\n                                                                        {\n                                                                            Header: 'Name',\n                                                                            accessor: 'full_name',\n                                                                            Cell: props => (\n                                                                                <div className=\"d-block w-100 text-left\">\n                                                                                    <span>\n                                                                                        {getPlayerDisplayName(props.original)}\n                                                                                    </span>\n                                                                                </div>\n                                                                            ),\n                                                                        },\n                                                                        {\n                                                                            Header: 'Result',\n                                                                            accessor: 'lottery_number',\n                                                                            Cell: props => (\n                                                                                <div className=\"d-block w-100 text-center\">\n                                                                                    <LotteryNumberList\n                                                                                        ulClass=\"number-in-column\"\n                                                                                        numbers={props.original.lottery_slot.result}\n                                                                                        activeNumbers={props.original.lottery_slot.result}\n                                                                                    />\n                                                                                </div>\n                                                                            ),\n                                                                        },\n                                                                        {\n                                                                            Header: 'Winning Number',\n                                                                            accessor: 'lottery_number',\n                                                                            Cell: props => (\n                                                                                <div className=\"d-block w-100 text-center\">\n                                                                                    <LotteryNumberList\n                                                                                        ulClass=\"number-in-column\"\n                                                                                        numbers={props.original.lottery_number}\n                                                                                        activeNumbers={props.original.lottery_slot.result}\n                                                                                    />\n                                                                                </div>\n                                                                            ),\n                                                                        },\n                                                                        {\n                                                                            Header: 'Won Amount',\n                                                                            accessor: 'won_amount',\n                                                                            Cell: props => (\n                                                                                <div className=\"d-block w-100 text-right\">\n                                                                                    <span>\n                                                                                        { bitsToBtc(props.original.won_amount * 1 + props.original.service_charge * 1)}\n                                                                                    </span>\n                                                                                    <span className={ \"winner-type \" + getWinningTypeClass(props.original) }>\n                                                                                        { getWinningTypeIcon(props.original) }\n                                                                                    </span>\n                                                                                </div>\n                                                                            ),\n                                                                        },\n                                                                    ]\n                                                                },\n                                                            ]}\n                                                            defaultPageSize={15}\n                                                            showPagination={true}\n                                                            className=\"-striped -highlight\"\n                                                            manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n                                                            pages={pages} // Display the total number of pages\n                                                            loading={isLoading} // Display the loading overlay when we need it\n                                                            onFetchData={this.fetchData} // Request new data when things change\n                                                            filterable={false}\n                                                            sortable={false}\n                                                        />\n                                                    </div>\n                                                    :\n                                                    <div className=\"card-body\">Winners not found.</div>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nexport default PastWinners;","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport \"react-table/react-table.css\";\nimport { sanitize } from \"dompurify\";\n\nimport request from \"../../services/request\";\nimport { MESSAGES } from \"../../constants/messages\";\nimport { getBySlug } from \"../../utils/helper/helperFunctions\";\nimport ContactUs from \"./ContactUs\";\nimport withLayout from \"../HOC/withLayout\";\nimport PastWinners from \"./PastWinners\";\n\nclass Page extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n    };\n\n    this.playLottery = this.playLottery.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.match.params.slug !== nextProps.match.params.slug) {\n      this.bootstrap(nextProps.match.params.slug);\n    }\n  }\n\n  componentDidMount() {\n    this.bootstrap(this.props.match.params.slug);\n  }\n\n  bootstrap(slug) {\n    // Get Page\n    this.setState({ isLoading: true });\n\n    if (slug === \"contact\" || slug === \"winners\") {\n      return;\n    }\n\n    if (!this.props.page[slug]) {\n      this.props\n        .makeRequest(\n          request.Pages.show,\n          { slug: slug },\n          { message: MESSAGES.LOGGING }\n        )\n        .then(\n          (res) => {\n            if (res.data) {\n              this.props.setPage(res);\n              this.setState({ isLoading: false });\n            }\n          },\n          (errorData) => {}\n        );\n    }\n  }\n\n  playLottery() {\n    const { isAuthenticated } = this.props.auth;\n\n    // check if authenticated\n    if (!isAuthenticated) {\n      this.props.setModal(\"login\");\n      return;\n    }\n\n    this.props.setModal(\"playLottery\");\n\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const { slug } = this.props.match.params;\n    const { pages } = this.props.page;\n    const currentPage = getBySlug(pages, slug);\n    return (\n      <Fragment>\n        {slug === \"contact\" && <ContactUs {...this.props} />}\n\n        {slug === \"winners\" && <PastWinners {...this.props} />}\n\n        {slug !== \"contact\" && slug !== \"winners\" && (\n          <div className=\"section-bottom\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <div className=\"inner-content-wrap\">\n                    <h1>{currentPage.title}</h1>\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: sanitize(currentPage.content),\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nPage.propTypes = {\n  makeRequest: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    auth: state.authReducer,\n    appStatus: state.appStatusReducer,\n    lottery: state.lotteryReducer,\n    my: state.myReducer,\n    page: state.pageReducer,\n  };\n}\n\nexport default withLayout(Page);\n\n"],"sourceRoot":""}