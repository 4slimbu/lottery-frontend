{"version":3,"sources":["Components/AppCommon/LotteryWinnerList.js","Components/Home/Winners/index.js","Components/Home/LotteryPicker/index.js","Components/AppCommon/GameInfo.js","Components/AppCommon/PlayersList.js","Components/Home/Players/index.js","Components/Home/index.js"],"names":["LotteryWinnerList","props","ulClass","liClass","winners","react_default","a","createElement","className","classnames","_","winner","key","full_name","inCurrency","won_amount","service_charge","Winners","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","lottery","react","AppCommon_LotteryWinnerList","data","react_router_dom","exact","to","Component","withRouter","connect","auth","authReducer","appStatus","appStatusReducer","lotteryReducer","makeRequest","LotteryPicker","numbers","pickedNumbers","randomPick","bind","assertThisInitialized","handleNumberClick","playLottery","number","index","indexOf","firstEmptyKey","getFirstEmptyPosition","setState","setLotteryPickedNumbers","pick","arguments","length","undefined","that","theLoop","i","setTimeout","generateRandomLotteryNumber","noPick","isAuthenticated","isNumberPickedCorrectly","setModal","alert","_this$state","PickedNumbers","handleClick","LotteryNumberList","activeNumbers","onClick","React","setUser","GameInfo","gameStatus","result","timer","days","hours","minutes","seconds","miliSeconds","_this$props$lottery","slot","id","setTimer","countDownDate","Date","end_time","getTime","x","setInterval","now","distance","Math","floor","clearInterval","user","lastSlot","total_amount","pivot","PlayersList","players","player","Players","total","AppCommon_PlayersList","Home","lotterySlotParticipantsCount","total_participants","Home_Winners","Home_LotteryPicker","AppCommon_GameInfo","Home_Players","withLayout"],"mappings":"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","file":"static/js/9.83d528ce.chunk.js","sourcesContent":["import React from \"react\";\nimport * as _ from \"lodash\";\nimport * as classnames from \"classnames\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faBtc} from \"@fortawesome/free-brands-svg-icons\";\nimport {inCurrency} from \"../../utils/helper/helperFunctions\";\n\nconst LotteryWinnerList = (props) => {\n    const {ulClass, liClass, winners} = props;\n    return (\n        <ol className={classnames(\"list-group list-group-flush\", ulClass)}>\n            {\n                _.map(winners, (winner, key) => {\n                    return (\n                        <li key={key} className={classnames(\"list-group-item\", liClass)}>\n                            {\n                                winner ?\n                                    <div>\n                                        <span className=\"player-name\">{winner.full_name}</span>\n                                            <span className=\"player-lottery-amount\">\n                                                {/*<FontAwesomeIcon icon={faBtc}/>*/}\n                                            { inCurrency(winner.won_amount * 1 + winner.service_charge * 1)}\n                                        </span>\n                                    </div>\n                                    :\n                                    <div className=\"placeholder-div\">\n                                    </div>\n                            }\n                        </li>\n                    );\n                })\n            }\n        </ol>\n    )\n};\n\nexport default LotteryWinnerList;","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport LotteryWinnerList from \"../../AppCommon/LotteryWinnerList\";\n\nclass Winners extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            isLoading: true,\n            winners: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n        }\n    }\n\n    render() {\n        const {winners} = this.props.lottery;\n        return (\n            <Fragment>\n                <div className=\"winners-table card\">\n                    <h4 className=\"card-header\">\n                        Recent Winners\n                    </h4>\n                    <LotteryWinnerList winners={winners.data}/>\n                    <div className=\"card-body\">\n                        <NavLink exact={true} className='card-link'\n                                 to='/winners'>View Past Winners</NavLink>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        lottery: state.lotteryReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest,\n})(Winners));","import React, {Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\nimport {\n    findSetting, generateRandomLotteryNumber, getFirstEmptyPosition,\n    isNumberPickedCorrectly,\n} from \"../../../utils/helper/helperFunctions\";\nimport PickedNumbers from \"../../AppCommon/PickedNumbers\";\nimport {withRouter} from \"react-router-dom\";\nimport {setModal} from \"../../../actions/appStatusAction\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setUser} from \"../../../actions/authActions\";\nimport {setLotteryPickedNumbers} from \"../../../actions/lotteryActions\";\n\nclass LotteryPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numbers: [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n                11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n                21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n                41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n                51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n                61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n                71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n                81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\n                91, 92, 93, 94, 95, 96, 97, 98, 99\n            ],\n            pickedNumbers: [],\n        };\n\n        this.randomPick = this.randomPick.bind(this);\n        this.handleNumberClick = this.handleNumberClick.bind(this);\n        this.playLottery = this.playLottery.bind(this);\n    }\n\n    componentDidMount() {\n        this.randomPick(false);\n    }\n\n    componentWillUnmount() {\n    }\n\n    handleNumberClick(number) {\n        let {pickedNumbers} = this.state;\n\n        let index = pickedNumbers.indexOf(number);\n\n        if (index !== -1) {\n            delete pickedNumbers[index];\n        } else {\n            let firstEmptyKey = getFirstEmptyPosition(pickedNumbers);\n            if (typeof firstEmptyKey === 'number') {\n                pickedNumbers[firstEmptyKey] = number;\n            }\n        }\n\n        this.setState({\n            pickedNumbers: pickedNumbers,\n        });\n        this.props.setLotteryPickedNumbers(pickedNumbers);\n    }\n\n    randomPick(pick = true) {\n        let that = this;\n        (function theLoop(i) {\n            setTimeout(function () {\n                let randomPick = generateRandomLotteryNumber();\n\n                that.setState({\n                    pickedNumbers: randomPick,\n                });\n\n                that.props.setLotteryPickedNumbers(randomPick);\n\n                if (--i) {          // If i > 0, keep going\n                    theLoop(i);       // Call the loop again, and pass it the current value of i\n                } else {\n                    // Reset to blank after random number shuffle\n                    if (! pick) {\n                        let noPick = [undefined, undefined, undefined, undefined, undefined, undefined];\n                        that.setState({\n                            pickedNumbers: noPick\n                        });\n                        that.props.setLotteryPickedNumbers(noPick);\n                    }\n                }\n            }, 150);\n        })(10);\n    }\n\n    playLottery() {\n        const {isAuthenticated} = this.props.auth;\n        const {pickedNumbers} = this.state;\n\n        // check if all numbers are picked\n        if (! isNumberPickedCorrectly(pickedNumbers)) {\n            alert('Please pick lottery number.');\n            return;\n        }\n\n        // check if authenticated\n        if (! isAuthenticated) {\n            this.props.setModal('login');\n            return;\n        }\n\n        this.props.setModal('playLottery');\n    }\n\n    render() {\n        const {numbers, pickedNumbers} = this.state;\n        let firstEmptyKey = getFirstEmptyPosition(pickedNumbers);\n\n        return (\n            <Fragment>\n                <div className=\"lottery-table card focusable\">\n                    <h4 className=\"card-header\">\n                        <span>{ typeof firstEmptyKey !== 'undefined' ? 'Pick Numbers' : 'Picked Numbers' }</span>\n                        <PickedNumbers\n                            liClass=\"picked-number\"\n                            numbers={pickedNumbers}\n                            handleClick={this.handleNumberClick}\n                        />\n                    </h4>\n                    <div className=\"card-body\">\n                        <LotteryNumberList\n                            ulClass=\"lottery-table-numbers\"\n                            liClass=\"lottery-table-number\"\n                            numbers={numbers}\n                            activeNumbers={pickedNumbers}\n                            handleClick={this.handleNumberClick}\n                        />\n                        <div className=\"buttons\">\n                            <button className=\"btn btn-info\" onClick={this.randomPick}>Random Pick</button>\n                            <button className=\"btn btn-primary\" onClick={this.playLottery}>Play Now</button>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    setModal,\n    makeRequest,\n    setUser,\n    setLotteryPickedNumbers\n})(LotteryPicker));","import React, {Component, Fragment} from 'react';\nimport LotteryNumberList from \"./LotteryNumberList\";\nimport {checkIfWinner, inCurrency, isItemLoaded} from \"../../utils/helper/helperFunctions\";\nimport * as _ from \"lodash\";\n\nclass GameInfo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            gameStatus: \"\",\n            result: null,\n            timer: {\n                days: '00',\n                hours: '00',\n                minutes: '00',\n                seconds: '00',\n                miliSeconds: '000'\n            }\n\n        };\n\n        this.handleNumberClick = this.handleNumberClick.bind(this);\n    }\n\n    componentWillReceiveProps() {\n        const {slot, result} = this.props.lottery;\n        this.setState({\n            slot: slot,\n            result: result\n        });\n\n        slot && slot.id && this.setTimer();\n    }\n\n    setTimer() {\n        let that = this;\n        const {slot} = this.props.lottery;\n        // Set the date we're counting down to\n        let countDownDate = new Date(slot.end_time).getTime();\n\n        // Update the count down every 1 second\n        let x = setInterval(function() {\n\n            // Get today's date and time\n            let now = new Date().getTime();\n\n            // Find the distance between now and the count down date\n            let distance = countDownDate - now;\n\n            // Time calculations for days, hours, minutes, seconds and mili seconds\n            let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n            let miliSeconds = Math.floor(distance % (1000));\n\n            // set timer values\n            that.setState({\n                timer: {\n                    days: days < 10 ? '0' + days: days,\n                    hours: hours < 10 ? '0' + hours: hours,\n                    minutes: minutes < 10 ? '0' + minutes: minutes,\n                    seconds: seconds < 10 ? '0' + seconds: seconds,\n                    miliSeconds: miliSeconds < 10 ? '00' + miliSeconds : (miliSeconds < 100 ? '0' + miliSeconds : miliSeconds)\n                }\n            });\n\n            // If the count down is finished, write some text\n            if (distance < 0) {\n                clearInterval(x);\n                that.setState({\n                    gameStatus: \"processing\",\n                })\n            } else {\n                that.setState({\n                    gameStatus: \"running\"\n                })\n            }\n        }, 1);\n    }\n\n    handleNumberClick() {\n\n    }\n\n\n    render() {\n        const {user} = this.props.auth;\n        const {lastSlot} = this.props.lottery;\n        const {gameStatus, timer, result} = this.state;\n        return (\n            <Fragment>\n                <div className=\"count-down-table card\">\n                    {\n                        gameStatus === \"running\" &&\n                        <div className=\"card-body\">\n                            <h4>Game in Progress</h4>\n                            <div className=\"countdown\">\n                                <div className=\"text-center\">Closing on</div>\n                                <h3 className=\"countdown-text\">\n                                    <span>{ timer.minutes }</span> : <span>{ timer.seconds }</span> : <span>{ timer.miliSeconds }</span>\n                                </h3>\n                            </div>\n                        </div>\n                    }\n                    {\n                        gameStatus === \"processing\" &&\n                        <div className=\"card-body\">\n                            <h4>Game Closed</h4>\n                            <div className=\"countdown\">\n                                <div className=\"text-center\">Waiting for Result ...</div>\n                                <h3 className=\"countdown-text\">\n                                    <span>&nbsp;</span>\n                                </h3>\n                            </div>\n                        </div>\n                    }\n                </div>\n                {\n                    lastSlot && lastSlot.id &&\n                    <div className=\"count-down-table card\">\n                        <div className=\"card-body\">\n                            <h4>Last Result</h4>\n                            <div className=\"text-center prize-pool-wrap\"><strong>Prize Pool: { inCurrency(lastSlot.total_amount) }</strong></div>\n\n                            {\n                                lastSlot.winners.length > 0 ?\n                                <div className=\"congratulation-note\">\n                                    <div className=\"text-center\"><strong>Congratulation to Winners</strong></div>\n                                    {\n                                        _.map(lastSlot.winners, function (winner, key) {\n                                            return <div key={key} className=\"winner-sec text-center\">{winner.full_name} : { inCurrency(winner.pivot.won_amount * 1 + winner.pivot.service_charge * 1) }</div>\n                                        })\n                                    }\n                                </div> :\n                                <div></div>\n                            }\n\n                            <div className=\"countdown\">\n                                <h5 className=\"counter-title text-center\">Winning Numbers</h5>\n                                <LotteryNumberList\n                                    ulClass=\"lottery-table-numbers result\"\n                                    liClass=\"lottery-table-number\"\n                                    numbers={lastSlot.result}\n                                    activeNumbers={lastSlot.result}\n                                    handleClick={this.handleNumberClick}\n                                />\n                            </div>\n\n                            <div className=\"text-center no-winners\">No Winners so pool prize has been added to next game.</div>\n\n                        </div>\n                    </div>\n                }\n            </Fragment>\n        )\n    }\n\n}\n\nexport default GameInfo","import React from \"react\";\nimport * as _ from \"lodash\";\nimport * as classnames from \"classnames\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faBtc} from \"@fortawesome/free-brands-svg-icons\";\n\nconst PlayersList = (props) => {\n    const {ulClass, liClass, players} = props;\n    return (\n        <ul className={classnames(\"players-list\", ulClass)}>\n            {\n                _.map(players, (player, key) => {\n                    return (\n                        <li key={key} className={classnames(liClass)}>\n                            {\n                                player ?\n                                    <div>\n                                        <span className=\"player-name\">{player.full_name} <small>joined the Game.</small></span>\n                                    </div>\n                                    :\n                                    <div className=\"placeholder-div-sm\">\n                                    </div>\n                            }\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    )\n};\n\nexport default PlayersList;","import React, {Fragment} from 'react';\nimport {connect} from 'react-redux';\n\nimport PlayersList from \"../../AppCommon/PlayersList\";\n\nconst Players = (props) => {\n    const {players, total} = props;\n    return (\n        <Fragment>\n            <div className=\"wining-numbers-table card\">\n                <div className=\"card-body\">\n                    <h4>Players : {total}</h4>\n                    <PlayersList players={players}/>\n                </div>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default Players;\n","import React, {Component, Fragment} from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport Winners from \"./Winners\";\nimport LotteryPicker from \"./LotteryPicker\";\nimport GameInfo from \"../../Components/AppCommon/GameInfo\";\nimport Players from \"./Players\";\nimport withLayout from \"../HOC/withLayout\";\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const {slot, players} = this.props.lottery;\n        const lotterySlotParticipantsCount = slot && slot.total_participants;\n        return (\n            <div className=\"section-bottom\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-md-5 col-lg-4\">\n                            <Winners/>\n                        </div>\n                        <div className=\"col-sm-12 col-md-7 col-lg-5\">\n                            <LotteryPicker/>\n                        </div>\n                        <div className=\"col-sm-12 col-md-12 col-lg-3\">\n                            <GameInfo lottery={this.props.lottery} auth={this.props.auth}/>\n                            <Players players={players.data} total={lotterySlotParticipantsCount}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withLayout(Home);"],"sourceRoot":""}