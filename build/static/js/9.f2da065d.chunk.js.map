{"version":3,"sources":["Components/AppCommon/LotteryWinnerList.js","Components/Home/Winners/index.js","Components/Home/LotteryPicker/index.js","Components/AppCommon/GameInfo.js","Components/AppCommon/PlayersList.js","Components/Home/Players/index.js","Components/Home/index.js"],"names":["LotteryWinnerList","props","ulClass","liClass","winners","react_default","a","createElement","className","classnames","_","winner","key","getPlayerDisplayName","inCurrency","won_amount","service_charge","getWinningTypeClass","getWinningTypeIcon","Winners","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","lottery","react","AppCommon_LotteryWinnerList","data","react_router_dom","exact","to","Component","withRouter","connect","auth","authReducer","appStatus","appStatusReducer","lotteryReducer","makeRequest","LotteryPicker","numbers","pickedNumbers","randomPick","bind","assertThisInitialized","handleNumberClick","playLottery","handleSlotCloseEvent","_this2","window","Echo","channel","listen","e","console","log","noPick","undefined","setState","setLotteryPickedNumbers","number","index","indexOf","firstEmptyKey","getFirstEmptyPosition","pick","arguments","length","that","theLoop","i","setTimeout","generateRandomLotteryNumber","isAuthenticated","setModal","_this$state","PickedNumbers","handleClick","LotteryNumberList","activeNumbers","onClick","React","setUser","GameInfo","gameStatus","result","timer","days","hours","minutes","seconds","miliSeconds","deciSeconds","_this$props$lottery","slot","id","setTimer","countDownDate","Date","end_time","getTime","x","setInterval","now","distance","Math","floor","clearInterval","lastSlot","pivot","PlayersList","players","player","Players","total","AppCommon_PlayersList","Home","lotterySlotParticipantsCount","total_participants","Home_Winners","Home_LotteryPicker","AppCommon_GameInfo","Home_Players","withLayout"],"mappings":"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","file":"static/js/9.f2da065d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport * as classnames from \"classnames\";\r\nimport {\r\n    getPlayerDisplayName, getWinningTypeClass, getWinningTypeIcon,\r\n    inCurrency\r\n} from \"../../utils/helper/helperFunctions\";\r\n\r\nconst LotteryWinnerList = (props) => {\r\n    const {ulClass, liClass, winners} = props;\r\n    return (\r\n        <ol className={classnames(\"list-group list-group-flush\", ulClass)}>\r\n            {\r\n                _.map(winners, (winner, key) => {\r\n                    return (\r\n                        <li key={key} className={classnames(\"list-group-item\", liClass)}>\r\n                            {\r\n                                winner ?\r\n                                    <div>\r\n                                        <span className=\"player-name\">{getPlayerDisplayName(winner)}</span>\r\n                                        <span className=\"player-lottery-amount\">\r\n                                            { inCurrency(winner.won_amount * 1 + winner.service_charge * 1)}\r\n                                            <span className={ \"winner-type \" + getWinningTypeClass(winner) }>\r\n                                                { getWinningTypeIcon(winner) }\r\n                                            </span>\r\n                                        </span>\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"placeholder-div\">\r\n                                    </div>\r\n                            }\r\n                        </li>\r\n                    );\r\n                })\r\n            }\r\n        </ol>\r\n    )\r\n};\r\n\r\nexport default LotteryWinnerList;","import React, {Component, Fragment} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {NavLink, withRouter} from \"react-router-dom\";\r\nimport LotteryWinnerList from \"../../AppCommon/LotteryWinnerList\";\r\n\r\nclass Winners extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            winners: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {winners} = this.props.lottery;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"winners-table card\">\r\n                    <h4 className=\"card-header\">\r\n                        Recent Winners\r\n                    </h4>\r\n                    <LotteryWinnerList winners={winners.data}/>\r\n                    <div className=\"card-body\">\r\n                        <NavLink exact={true} className='card-link'\r\n                                 to='/winners'>View Past Winners</NavLink>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        lottery: state.lotteryReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest,\r\n})(Winners));","import React, {Fragment} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\r\nimport {\r\n    findSetting, generateRandomLotteryNumber, getFirstEmptyPosition,\r\n    isNumberPickedCorrectly,\r\n} from \"../../../utils/helper/helperFunctions\";\r\nimport PickedNumbers from \"../../AppCommon/PickedNumbers\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {setModal} from \"../../../actions/appStatusAction\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setUser} from \"../../../actions/authActions\";\r\nimport {setLotteryPickedNumbers} from \"../../../actions/lotteryActions\";\r\n\r\nclass LotteryPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            numbers: [\r\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\r\n                11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n                21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n                31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\r\n                51, 52, 53, 54, 55, 56,\r\n                // 57, 58, 59, 60,\r\n                // 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\r\n                // 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\r\n                // 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\r\n                // 91, 92, 93, 94, 95, 96, 97, 98, 99\r\n            ],\r\n            pickedNumbers: [],\r\n        };\r\n\r\n        this.randomPick = this.randomPick.bind(this);\r\n        this.handleNumberClick = this.handleNumberClick.bind(this);\r\n        this.playLottery = this.playLottery.bind(this);\r\n        this.handleSlotCloseEvent = this.handleSlotCloseEvent.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        window.Echo.channel('lottery')\r\n            .listen('LotterySlotClosedEvent', (e) => {\r\n            this.handleSlotCloseEvent();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.randomPick(false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    handleSlotCloseEvent() {\r\n        console.log('handle slotclose event');\r\n        let noPick = [undefined, undefined, undefined, undefined, undefined, undefined];\r\n        this.setState({\r\n            pickedNumbers: noPick\r\n        });\r\n        this.props.setLotteryPickedNumbers(noPick);\r\n    }\r\n\r\n    handleNumberClick(number) {\r\n        let {pickedNumbers} = this.state;\r\n\r\n        let index = pickedNumbers.indexOf(number);\r\n\r\n        if (index !== -1) {\r\n            delete pickedNumbers[index];\r\n        } else {\r\n            let firstEmptyKey = getFirstEmptyPosition(pickedNumbers);\r\n            if (typeof firstEmptyKey === 'number') {\r\n                pickedNumbers[firstEmptyKey] = number;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            pickedNumbers: pickedNumbers,\r\n        });\r\n        this.props.setLotteryPickedNumbers(pickedNumbers);\r\n    }\r\n\r\n    randomPick(pick = true) {\r\n        let that = this;\r\n        (function theLoop(i) {\r\n            setTimeout(function () {\r\n                let randomPick = generateRandomLotteryNumber();\r\n\r\n                that.setState({\r\n                    pickedNumbers: randomPick,\r\n                });\r\n\r\n                that.props.setLotteryPickedNumbers(randomPick);\r\n\r\n                if (--i) {          // If i > 0, keep going\r\n                    theLoop(i);       // Call the loop again, and pass it the current value of i\r\n                } else {\r\n                    // Reset to blank after random number shuffle\r\n                    if (! pick) {\r\n                        let noPick = [undefined, undefined, undefined, undefined, undefined, undefined];\r\n                        that.setState({\r\n                            pickedNumbers: noPick\r\n                        });\r\n                        that.props.setLotteryPickedNumbers(noPick);\r\n                    }\r\n                }\r\n            }, 150);\r\n        })(10);\r\n    }\r\n\r\n    playLottery() {\r\n        const {isAuthenticated} = this.props.auth;\r\n\r\n        // check if authenticated\r\n        if (! isAuthenticated) {\r\n            this.props.setModal('login');\r\n            return;\r\n        }\r\n\r\n        this.props.setModal('playLottery');\r\n    }\r\n\r\n    render() {\r\n        const {numbers, pickedNumbers} = this.state;\r\n        let firstEmptyKey = getFirstEmptyPosition(pickedNumbers);\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"lottery-table card focusable\">\r\n                    <h4 className=\"card-header\">\r\n                        <span>{ typeof firstEmptyKey !== 'undefined' ? 'Pick Numbers' : 'Picked Numbers' }</span>\r\n                        <PickedNumbers\r\n                            liClass=\"picked-number\"\r\n                            numbers={pickedNumbers}\r\n                            handleClick={this.handleNumberClick}\r\n                        />\r\n                    </h4>\r\n                    <div className=\"card-body\">\r\n                        <LotteryNumberList\r\n                            ulClass=\"lottery-table-numbers\"\r\n                            liClass=\"lottery-table-number\"\r\n                            numbers={numbers}\r\n                            activeNumbers={pickedNumbers}\r\n                            handleClick={this.handleNumberClick}\r\n                        />\r\n                        <div className=\"buttons\">\r\n                            <button className=\"btn btn-info\" onClick={this.randomPick}>Random Pick</button>\r\n                            <button className=\"btn btn-primary\" onClick={this.playLottery}>Play Now</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    setModal,\r\n    makeRequest,\r\n    setUser,\r\n    setLotteryPickedNumbers\r\n})(LotteryPicker));","import React, {Component, Fragment} from 'react';\r\nimport LotteryNumberList from \"./LotteryNumberList\";\r\nimport {\r\n    getPlayerDisplayName,\r\n    getWinningTypeClass,\r\n    getWinningTypeIcon,\r\n    inCurrency\r\n} from \"../../utils/helper/helperFunctions\";\r\nimport * as _ from \"lodash\";\r\n\r\nclass GameInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            gameStatus: \"\",\r\n            result: null,\r\n            timer: {\r\n                days: '00',\r\n                hours: '00',\r\n                minutes: '00',\r\n                seconds: '00',\r\n                miliSeconds: '000',\r\n                deciSeconds: '00'\r\n            }\r\n\r\n        };\r\n\r\n        this.handleNumberClick = this.handleNumberClick.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps() {\r\n        const {slot, result} = this.props.lottery;\r\n        this.setState({\r\n            slot: slot,\r\n            result: result\r\n        });\r\n\r\n        slot && slot.id && this.setTimer();\r\n    }\r\n\r\n    setTimer() {\r\n        let that = this;\r\n        const {slot} = this.props.lottery;\r\n        // Set the date we're counting down to\r\n        let countDownDate = new Date(slot.end_time).getTime();\r\n\r\n        // Update the count down every 1 second\r\n        let x = setInterval(function() {\r\n\r\n            // Get today's date and time\r\n            let now = new Date().getTime();\r\n\r\n            // Find the distance between now and the count down date\r\n            let distance = countDownDate - now;\r\n\r\n            // Time calculations for days, hours, minutes, seconds and mili seconds\r\n            let days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n            let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            let seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n            let miliSeconds = Math.floor(distance % (1000));\r\n            let deciSeconds = Math.floor(distance % (10));\r\n\r\n            // set timer values\r\n            that.setState({\r\n                timer: {\r\n                    days: days < 10 ? '0' + days: days,\r\n                    hours: hours < 10 ? '0' + hours: hours,\r\n                    minutes: minutes < 10 ? '0' + minutes: minutes,\r\n                    seconds: seconds < 10 ? '0' + seconds: seconds,\r\n                    miliSeconds: miliSeconds < 10 ? '00' + miliSeconds : (miliSeconds < 100 ? '0' + miliSeconds : miliSeconds),\r\n                    deciSeconds: deciSeconds < 10 ? '0' + deciSeconds: deciSeconds,\r\n                }\r\n            });\r\n\r\n            // If the count down is finished, write some text\r\n            if (distance < 0) {\r\n                clearInterval(x);\r\n                that.setState({\r\n                    gameStatus: \"processing\",\r\n                })\r\n            } else {\r\n                that.setState({\r\n                    gameStatus: \"running\"\r\n                })\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    handleNumberClick() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {lastSlot} = this.props.lottery;\r\n        const {gameStatus, timer} = this.state;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"count-down-table card\">\r\n                    {\r\n                        gameStatus === \"running\" &&\r\n                        <div className=\"card-body\">\r\n                            <h4>Game Closing On</h4>\r\n                            <div className=\"countdown\">\r\n                                <h3 className=\"countdown-text\">\r\n                                    <span>{ timer.minutes }</span> : <span>{ timer.seconds }</span> : <span>{ timer.deciSeconds }</span>\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        gameStatus === \"processing\" &&\r\n                        <div className=\"card-body\">\r\n                            <h4>Result Processing ...</h4>\r\n                            <div className=\"countdown\">\r\n                                <h3 className=\"countdown-text\">\r\n                                    <span>00</span> : <span>00</span> : <span>00</span>\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        lastSlot && lastSlot.id &&\r\n                        <div className=\"card-body\">\r\n                            {\r\n                                lastSlot.winners.length > 0 && gameStatus !== 'processing' ?\r\n                                    <div className=\"congratulation-note\">\r\n                                        <div className=\"text-center\"><strong>Congratulation to Winners</strong></div>\r\n                                        {\r\n                                            _.map(lastSlot.winners, function (winner, key) {\r\n                                                return <div key={key} className=\"winner-sec text-center\">\r\n                                                    <span>\r\n                                                        {getPlayerDisplayName(winner)} : { inCurrency(winner.pivot.won_amount * 1 + winner.pivot.service_charge * 1) }\r\n                                                    </span>\r\n                                                    <span className={ \"winner-type \" + getWinningTypeClass(winner) }>\r\n                                                        { getWinningTypeIcon(winner) }\r\n                                                    </span>\r\n                                                </div>\r\n                                            })\r\n                                        }\r\n                                    </div> :\r\n                                    <div></div>\r\n                            }\r\n\r\n                            <div className=\"countdown\">\r\n                                <h5 className=\"counter-title text-center\">\r\n                                    {\r\n                                        gameStatus === 'processing' ? 'Getting Result ...' : 'Last Game Result'\r\n                                    }\r\n                                </h5>\r\n                                <LotteryNumberList\r\n                                    ulClass=\"lottery-table-numbers result\"\r\n                                    liClass=\"lottery-table-number\"\r\n                                    numbers={gameStatus === \"processing\" ? [\"\", \"\", \"\", \"\", \"\", \"\"] : lastSlot.result}\r\n                                    activeNumbers={lastSlot.result}\r\n                                    handleClick={this.handleNumberClick}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GameInfo","import React from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport * as classnames from \"classnames\";\r\nimport {getPlayerDisplayName} from \"../../utils/helper/helperFunctions\";\r\n\r\nconst PlayersList = (props) => {\r\n    const {ulClass, liClass, players} = props;\r\n    return (\r\n        <ul className={classnames(\"players-list\", ulClass)}>\r\n            {\r\n                _.map(players, (player, key) => {\r\n                    return (\r\n                        <li key={key} className={classnames(liClass)}>\r\n                            {\r\n                                player ?\r\n                                    <div>\r\n                                        <span className=\"player-name\">{getPlayerDisplayName(player)} <small>joined the Game.</small></span>\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"placeholder-div-sm\">\r\n                                    </div>\r\n                            }\r\n                        </li>\r\n                    );\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default PlayersList;","import React, {Fragment} from 'react';\r\n\r\nimport PlayersList from \"../../AppCommon/PlayersList\";\r\n\r\nconst Players = (props) => {\r\n    const {players, total} = props;\r\n    return (\r\n        <Fragment>\r\n            <div className=\"wining-numbers-table card\">\r\n                <div className=\"card-body\">\r\n                    <h4>Active Players : {total}</h4>\r\n                    <PlayersList players={players}/>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default Players;\r\n","import React, {Component, Fragment} from 'react'\r\nimport {withRouter} from \"react-router-dom\";\r\nimport Winners from \"./Winners\";\r\nimport LotteryPicker from \"./LotteryPicker\";\r\nimport GameInfo from \"../../Components/AppCommon/GameInfo\";\r\nimport Players from \"./Players\";\r\nimport withLayout from \"../HOC/withLayout\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {slot, players} = this.props.lottery;\r\n        const lotterySlotParticipantsCount = slot && slot.total_participants;\r\n        return (\r\n            <div className=\"section-bottom\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-5 col-lg-4\">\r\n                            <Winners/>\r\n                        </div>\r\n                        <div className=\"col-sm-12 col-md-7 col-lg-5\">\r\n                            <LotteryPicker/>\r\n                        </div>\r\n                        <div className=\"col-sm-12 col-md-12 col-lg-3\">\r\n                            <GameInfo lottery={this.props.lottery} auth={this.props.auth}/>\r\n                            <Players players={players.data} total={lotterySlotParticipantsCount}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withLayout(Home);"],"sourceRoot":""}