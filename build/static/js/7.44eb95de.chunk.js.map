{"version":3,"sources":["Components/AppCommon/AnimatedSection.js","Components/My/Dashboard/index.js","Components/My/Wallet/index.js","Components/My/Transactions/index.js","Components/My/Withdraw/index.js","Components/My/PlayedGames/index.js","Components/My/Profile/ViewProfile.js","Components/My/Profile/EditProfile.js","Components/My/Profile/index.js","Components/AppCommon/DashboardMenu.js","Components/My/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_addons_css_transition_group__WEBPACK_IMPORTED_MODULE_1__","react_addons_css_transition_group__WEBPACK_IMPORTED_MODULE_1___default","AnimatedSection","props","a","createElement","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","children","Dashboard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","bootstrap","_this2","setState","makeRequest","request","Me","getPlayedGames","message","MESSAGES","LOGGING","then","res","data","setPlayedGames","errorData","getTransactions","setTransactions","user","auth","wallet","_this$props$my","my","playedGames","transactions","react_default","react","className","free_games","inAppCoin","deposit","inCurrency","won","es","columns","Header","accessor","Cell","original","lottery_slot","slot_ref","LotteryNumberList","ulClass","numbers","lottery_number","result","won_amount","defaultPageSize","showPagination","react_router_dom","to","amount","React","Component","Wallet","pending_withdraw","id","full_name","created_at","updated_at","withRouter","connect","authReducer","appStatus","appStatusReducer","lottery","lotteryReducer","setLotteryWinners","setLotterySlot","setLotteryPlayers","setSettings","setCurrencies","setLastSlot","Transactions","myReducer","Withdraw","error","getWithdrawRequests","bind","assertThisInitialized","cancelWithdrawRequest","resetFields","handleChange","handleWithdraw","setWithdrawRequests","_this3","get","setUser","_this4","e","defineProperty","target","name","value","_this5","preventDefault","inCoin","createWithdrawRequest","responseData","getUserInfo","_this6","withdrawRequests","onSubmit","type","placeholder","onChange","status","onClick","PlayedGames","handleClick","handleNumberClick","ViewProfile","src","profile_pic","alt","username","email","contact_number","EditProfile","firstName","lastName","contactNumber","password","confirmPassword","profilePictureFile","profilePicture","files","editMode","handleSubmit","handleSwitch","handleImageLoaded","handleImageChange","_isMounted","first_name","last_name","event","errors","values","length","_this$state","undefined","password_confirmation","profile_picture","updateProfile","history","push","field","node","crop","reader","FileReader","file","onloadend","readAsDataURL","_this$state2","lib","model","Row","form","Col","md","FormGroup","style","width","react_image_cropper","ref","image","onImgLoad","Button","color","label","validate","errorMessage","required","minLength","match","Profile","fallback","react_loaders_default","react_router","exact","path","render","Profile_ViewProfile","Profile_EditProfile","DashboardMenu","Nav","activeClassName","My","playLottery","isAuthenticated","setModal","AppCommon_DashboardMenu","My_Dashboard","My_Wallet","My_Transactions","My_Withdraw","My_PlayedGames","My_Profile","withLayout"],"mappings":"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","file":"static/js/7.44eb95de.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\n\r\nconst AnimatedSection = (props) =>  {\r\n    return (\r\n        <ReactCSSTransitionGroup\r\n            transitionName=\"animated-section\"\r\n            transitionAppear={true}\r\n            transitionAppearTimeout={500}\r\n            transitionEnter={false}\r\n            transitionLeave={false}>\r\n            { props.children }\r\n        </ReactCSSTransitionGroup>\r\n    )\r\n};\r\n\r\nexport default AnimatedSection;","import React, {Fragment} from 'react'\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {inAppCoin, inCurrency} from \"../../../utils/helper/helperFunctions\";\r\nimport request from \"../../../services/request\";\r\nimport {MESSAGES} from \"../../../constants/messages\";\r\nimport ReactTable from \"react-table\";\r\nimport 'react-table/react-table.css'\r\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.bootstrap();\r\n    }\r\n\r\n    bootstrap() {\r\n        // Get Played Games\r\n        this.setState({isLoading: true});\r\n        this.props.makeRequest(request.Me.getPlayedGames, {}, {message: MESSAGES.LOGGING}).then(\r\n            (res) => { if (res.data) { this.props.setPlayedGames(res); this.setState({isLoading: false}); } },\r\n            (errorData) => {}\r\n        );\r\n        // Get Transactions\r\n        this.setState({isLoading: true});\r\n        this.props.makeRequest(request.Me.getTransactions, {}, {message: MESSAGES.LOGGING}).then(\r\n            (res) => { if (res.data) { this.props.setTransactions(res); this.setState({isLoading: false}); } },\r\n            (errorData) => {}\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {isLoading} = this.state;\r\n        const {user} = this.props.auth;\r\n        const {wallet} = user;\r\n        const {playedGames, transactions} = this.props.my;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Free Games</div>\r\n                                <div className=\"card-body\">{ user && user.free_games }</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Deposit</div>\r\n                                <div className=\"card-body\">{ wallet && inAppCoin(wallet.deposit) }</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Won</div>\r\n                                <div className=\"card-body\">{ wallet && inCurrency(wallet.won) }</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Latest Played Games</div>\r\n                                {\r\n                                    playedGames && playedGames.data ?\r\n                                        <div>\r\n                                            <div className=\"card-body\">\r\n                                                <ReactTable\r\n                                                    data={playedGames.data}\r\n                                                    columns={[\r\n                                                        {\r\n                                                            columns: [\r\n                                                                {\r\n                                                                    Header: 'Slot Ref',\r\n                                                                    accessor: 'slot_ref',\r\n                                                                    Cell: props => (\r\n                                                                        <div>\r\n                                                                            { props.original.lottery_slot.slot_ref }\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                },\r\n                                                                {\r\n                                                                    Header: 'Lottery Number',\r\n                                                                    Cell: props => (\r\n                                                                        <div>\r\n                                                                            <LotteryNumberList\r\n                                                                                ulClass=\"number-in-column\"\r\n                                                                                numbers={props.original.lottery_number}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                },\r\n                                                                {\r\n                                                                    Header: 'Winning Number',\r\n                                                                    accessor: 'result',\r\n                                                                    Cell: props => (\r\n                                                                        <div>\r\n                                                                            <LotteryNumberList\r\n                                                                                ulClass=\"number-in-column\"\r\n                                                                                numbers={props.original.lottery_slot.result}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                },\r\n                                                                {\r\n                                                                    Header: 'Won',\r\n                                                                    accessor: 'won_amount',\r\n                                                                    Cell: props => (\r\n                                                                        <div>\r\n                                                                            { inCurrency(props.original.won_amount) }\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                }\r\n                                                            ]\r\n                                                        },\r\n                                                    ]}\r\n                                                    defaultPageSize={5}\r\n                                                    showPagination={false}\r\n                                                    className=\"-striped -highlight\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"card-footer\">\r\n                                                <div className=\"text-center\">\r\n                                                    <Link to=\"/my/played-games\">View all</Link>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        :\r\n                                        <div className=\"card-body\">You have not played any games.</div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Latest Transactions</div>\r\n                                {\r\n                                    transactions && transactions.data ?\r\n                                        <div>\r\n                                            <div className=\"card-body\">\r\n                                                <ReactTable\r\n                                                    data={transactions.data}\r\n                                                    columns={[\r\n                                                        {\r\n                                                            columns: [\r\n                                                                {\r\n                                                                    Header: 'Transaction Code',\r\n                                                                    accessor: 'transaction_code',\r\n                                                                },\r\n                                                                {\r\n                                                                    Header: 'Type',\r\n                                                                    accessor: 'type'\r\n                                                                },\r\n                                                                {\r\n                                                                    Header: 'Amount',\r\n                                                                    accessor: 'amount',\r\n                                                                    Cell: props => (\r\n                                                                        <div>\r\n                                                                            { inCurrency(props.original.amount) }\r\n                                                                        </div>\r\n                                                                    )\r\n                                                                },\r\n                                                                {\r\n                                                                    Header: 'Date',\r\n                                                                    accessor: 'updated_at'\r\n                                                                }\r\n                                                            ]\r\n                                                        },\r\n                                                    ]}\r\n                                                    defaultPageSize={5}\r\n                                                    showPagination={false}\r\n                                                    className=\"-striped -highlight\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"card-footer\">\r\n                                                <div className=\"text-center\">\r\n                                                    <Link to=\"/my/transactions\">View all</Link>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        :\r\n                                        <div className=\"card-body\">You have not made any transactions.</div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\r\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\r\nimport {inAppCoin, inCurrency} from \"../../../utils/helper/helperFunctions\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\n\r\nclass Wallet extends Component {\r\n\r\n    render() {\r\n        const {user} = this.props.auth;\r\n        const {wallet} = user;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Pending Withdraw</div>\r\n                                <div className=\"card-body\">{ inCurrency(wallet && wallet.pending_withdraw) }</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Deposit</div>\r\n                                <div className=\"card-body\">{ wallet && inAppCoin(wallet.deposit) }</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Won</div>\r\n                                <div className=\"card-body\">{ wallet && inCurrency(wallet.won) }</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Wallet Info</div>\r\n                                <div className=\"card-body\">\r\n                                    <ul className=\"list-group list-group-flush\">\r\n                                        <li className=\"list-group-item\"><strong>ID: </strong> { wallet.id}</li>\r\n                                        <li className=\"list-group-item\"><strong>Owner: </strong> { user.full_name }</li>\r\n                                        <li className=\"list-group-item\"><strong>Pending Withdraw: </strong> { wallet.pending_withdraw }</li>\r\n                                        <li className=\"list-group-item\"><strong>Deposit: </strong> { inCurrency(wallet.deposit) }</li>\r\n                                        <li className=\"list-group-item\"><strong>Won: </strong> { inCurrency(wallet.won) }</li>\r\n                                        <li className=\"list-group-item\"><strong>Created on: </strong> { wallet.created_at }</li>\r\n                                        <li className=\"list-group-item\"><strong>Last Updated on: </strong> { wallet.updated_at }</li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nWallet.propTypes = {\r\n    makeRequest: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        lottery: state.lotteryReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\r\n})(Wallet));","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\r\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\r\nimport ReactTable from \"react-table\";\r\nimport {inCurrency} from \"../../../utils/helper/helperFunctions\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\n\r\nclass Transactions extends Component {\r\n\r\n    render() {\r\n        const {transactions} = this.props.my;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Transactions</div>\r\n                                <div className=\"card-body\">\r\n                                    {\r\n                                        transactions && transactions.data ?\r\n                                            <div>\r\n                                                <div className=\"card-body\">\r\n                                                    <ReactTable\r\n                                                        data={transactions.data}\r\n                                                        columns={[\r\n                                                            {\r\n                                                                columns: [\r\n                                                                    {\r\n                                                                        Header: 'Transaction Code',\r\n                                                                        accessor: 'transaction_code',\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Header: 'Type',\r\n                                                                        accessor: 'type'\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Header: 'Amount',\r\n                                                                        accessor: 'amount',\r\n                                                                        Cell: props => (\r\n                                                                            <div>\r\n                                                                                { inCurrency(props.original.amount) }\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Header: 'Date',\r\n                                                                        accessor: 'updated_at'\r\n                                                                    }\r\n                                                                ]\r\n                                                            },\r\n                                                        ]}\r\n                                                        defaultPageSize={15}\r\n                                                        showPagination={true}\r\n                                                        className=\"-striped -highlight\"\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            :\r\n                                            <div className=\"card-body\">You have not made any transactions.</div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nTransactions.propTypes = {\r\n    makeRequest: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        my: state.myReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\r\n})(Transactions));","import React, {Component, Fragment} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\r\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\r\nimport request from \"../../../services/request\";\r\nimport {MESSAGES} from \"../../../constants/messages\";\r\nimport {setWithdrawRequests} from \"../../../actions/myActions\";\r\nimport ReactTable from \"react-table\";\r\nimport {inCoin, inCurrency} from \"../../../utils/helper/helperFunctions\";\r\nimport {setUser} from \"../../../actions/authActions\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\n\r\nclass Withdraw extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            amount: \"\",\r\n            error: \"\",\r\n        };\r\n\r\n        this.getWithdrawRequests = this.getWithdrawRequests.bind(this);\r\n        this.cancelWithdrawRequest = this.cancelWithdrawRequest.bind(this);\r\n        this.resetFields = this.resetFields.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleWithdraw = this.handleWithdraw.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.bootstrap();\r\n    }\r\n\r\n    bootstrap() {\r\n        // Get Withdraw Requests\r\n        this.setState({isLoading: true});\r\n        this.getWithdrawRequests();\r\n    }\r\n\r\n    getWithdrawRequests() {\r\n        this.props.makeRequest(request.Me.getWithdrawRequests, {}, {message: MESSAGES.LOGGING}).then(\r\n            (res) => { if (res.data) { this.props.setWithdrawRequests(res); this.setState({isLoading: false}); } },\r\n            (errorData) => {}\r\n        );\r\n    }\r\n\r\n    getUserInfo() {\r\n        this.props.makeRequest(request.Me.get, {}, {message: MESSAGES.LOGGING}).then(\r\n            (res) => {\r\n                this.props.setUser(res.data);\r\n                this.setState({ isLoading: false });\r\n            },\r\n            (errorData) => {\r\n                this.setState({isLoading: false});\r\n            }\r\n        );\r\n    }\r\n\r\n    cancelWithdrawRequest(id) {\r\n        this.props.makeRequest(request.Me.cancelWithdrawRequest, {id: id}, {message: MESSAGES.LOGGING}).then(\r\n            (res) => { if (res.data) { this.getWithdrawRequests(); this.setState({isLoading: false}); } },\r\n            (errorData) => {}\r\n        );\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    handleWithdraw(e) {\r\n        e.preventDefault();\r\n\r\n        const {wallet} = this.props.auth.user;\r\n        if (this.state.amount <= 0) {\r\n            this.setState({\r\n                error: \"Please enter valid amount\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (inCoin(this.state.amount, false) > wallet.won) {\r\n            this.setState({\r\n                error: \"Amount cannot be greater than available balance\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            amount: inCoin(this.state.amount, false)\r\n        };\r\n\r\n        this.setState({isLoading: true});\r\n        this.props.makeRequest(request.Me.createWithdrawRequest, data, {message: MESSAGES.LOGGING}).then(\r\n            (responseData) => {\r\n                this.getUserInfo();\r\n                this.getWithdrawRequests();\r\n                this.resetFields();\r\n                this.setState({isLoading: false});\r\n            },\r\n            (errorData) => {\r\n                this.resetFields();\r\n                this.setState({error: errorData.message});\r\n                this.setState({isLoading: false});\r\n            }\r\n        );\r\n    }\r\n\r\n    resetFields() {\r\n        this.setState({\r\n            amount: \"\",\r\n            error: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {withdrawRequests} = this.props.my;\r\n        const {wallet} = this.props.auth.user;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Withdraw</div>\r\n                                <div className=\"card-body\">\r\n                                    <p>Available Balance: <strong>{wallet && inCurrency(wallet.won)}</strong></p>\r\n                                    <form className=\"withdraw-form\" onSubmit={this.handleWithdraw}>\r\n                                        <div className=\"input-group\">\r\n                                            <input name=\"amount\" type=\"text\" className=\"form-control\" placeholder=\"0.00\"\r\n                                                   onChange={this.handleChange}\r\n                                                   value={this.state.amount}\r\n                                            />\r\n                                            <div className=\"input-group-append\">\r\n                                                <span className=\"input-group-text\">BTC</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            { this.state.error && <span className=\"text text-danger\">{ this.state.error }</span>}\r\n                                        </div>\r\n                                        <div className=\"btn-group\">\r\n                                            <button className=\"btn btn-primary btn-black\">Withdraw</button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Withdraw Requests</div>\r\n                                <div className=\"card-body\">\r\n                                    <ReactTable\r\n                                        data={withdrawRequests.data}\r\n                                        columns={[\r\n                                            {\r\n                                                columns: [\r\n                                                    {\r\n                                                        Header: 'Created On',\r\n                                                        accessor: 'created_at',\r\n                                                    },\r\n                                                    {\r\n                                                        Header: 'Amount',\r\n                                                        accessor: 'amount',\r\n                                                        Cell: props => (\r\n                                                            <div>\r\n                                                                { inCurrency(props.original.amount) }\r\n                                                            </div>\r\n                                                        )\r\n                                                    },\r\n                                                    {\r\n                                                        Header: 'Status',\r\n                                                        accessor: 'status'\r\n                                                    },\r\n                                                    {\r\n                                                        Header: 'Action',\r\n                                                        accessor: 'action',\r\n                                                        Cell: props => (\r\n                                                            <div>\r\n                                                                {\r\n                                                                    props.original.status === 'pending' &&\r\n                                                                    <button onClick={() => this.cancelWithdrawRequest(props.original.id)}>Cancel</button>\r\n                                                                }\r\n                                                            </div>\r\n                                                        )\r\n                                                    },\r\n                                                ]\r\n                                            },\r\n                                        ]}\r\n                                        defaultPageSize={10}\r\n                                        showPagination={true}\r\n                                        className=\"-striped -highlight\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nWithdraw.propTypes = {\r\n    makeRequest: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        my: state.myReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot,\r\n    setWithdrawRequests, setUser\r\n})(Withdraw));","import React, {Component, Fragment} from 'react';\r\nimport ReactTable from \"react-table\";\r\nimport {inCurrency} from \"../../../utils/helper/helperFunctions\";\r\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\n\r\nclass PlayedGames extends Component {\r\n\r\n    render() {\r\n        const {playedGames} = this.props.my;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Played Games</div>\r\n                                <div className=\"card-body\">\r\n                                    {\r\n                                        playedGames && playedGames.data ?\r\n                                            <div>\r\n                                                <div className=\"card-body\">\r\n                                                    <ReactTable\r\n                                                        data={playedGames.data}\r\n                                                        columns={[\r\n                                                            {\r\n                                                                columns: [\r\n                                                                    {\r\n                                                                        Header: 'Slot Ref',\r\n                                                                        accessor: 'slot_ref',\r\n                                                                        Cell: props => (\r\n                                                                            <div>\r\n                                                                                { props.original.lottery_slot.slot_ref }\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Header: 'Lottery Number',\r\n                                                                        accessor: 'lottery_number',\r\n                                                                        Cell: props => (\r\n                                                                            <div>\r\n                                                                                <LotteryNumberList\r\n                                                                                    ulClass=\"number-in-column\"\r\n                                                                                    numbers={props.original.lottery_number}\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Header: 'Winning Number',\r\n                                                                        accessor: 'result',\r\n                                                                        Cell: props => (\r\n                                                                            <div>\r\n                                                                                <LotteryNumberList\r\n                                                                                    ulClass=\"number-in-column\"\r\n                                                                                    numbers={props.original.lottery_slot.result}\r\n                                                                                    handleClick={this.handleNumberClick}\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    },\r\n                                                                    {\r\n                                                                        Header: 'Won',\r\n                                                                        accessor: 'won_amount',\r\n                                                                        Cell: props => (\r\n                                                                            <div>\r\n                                                                                { inCurrency(props.original.won_amount) }\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    }\r\n                                                                ]\r\n                                                            },\r\n                                                        ]}\r\n                                                        defaultPageSize={15}\r\n                                                        showPagination={true}\r\n                                                        className=\"-striped -highlight\"\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            :\r\n                                            <div className=\"card-body\">You have not played any games.</div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default PlayedGames;","import React, {Component, Fragment} from 'react'\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\r\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\n\r\nclass ViewProfile extends Component {\r\n\r\n    render() {\r\n        const {user} = this.props.auth;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card my-profile\">\r\n                                <div className=\"card-header\">Profile</div>\r\n                                <div className=\"card-body\">\r\n                                    <img className=\"card-img-top img-profile\" src={user.profile_pic} alt=\"Profile picture\" />\r\n                                    <ul className=\"list-group list-group-flush\">\r\n                                        <li className=\"list-group-item\"><strong>Username: </strong> { user.username }</li>\r\n                                        <li className=\"list-group-item\"><strong>Name: </strong> { user.full_name }</li>\r\n                                        <li className=\"list-group-item\"><strong>Email: </strong> { user.email }</li>\r\n                                        <li className=\"list-group-item\"><strong>Contact No: </strong> { user.contact_number }</li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div className=\"card-footer\">\r\n                                    <div className=\"text-center\">\r\n                                        <Link to=\"/my/profile/edit\">Edit</Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        lottery: state.lotteryReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\r\n})(ViewProfile));","import React, {Component, Fragment} from 'react'\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\r\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\nimport request from \"../../../services/request\";\r\nimport {MESSAGES} from \"../../../constants/messages\";\r\nimport {AvField, AvForm, AvGroup, AvRadio, AvRadioGroup} from \"availity-reactstrap-validation\";\r\nimport {Button, Col, FormGroup, Label, Row} from \"reactstrap\";\r\nimport {Cropper} from \"react-image-cropper\";\r\nimport {Loader} from \"react-loaders\";\r\nimport {setUser} from \"../../../actions/authActions\";\r\n\r\nclass EditProfile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            email: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            contactNumber: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            profilePictureFile: \"\",\r\n            profilePicture: \"\",\r\n            error: \"\",\r\n            isLoading: false,\r\n            files: [],\r\n            editMode: \"pick\", // pick | crop | done\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSwitch = this.handleSwitch.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleImageLoaded = this.handleImageLoaded.bind(this);\r\n        this.handleImageChange = this.handleImageChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        this.setState({isLoading: true});\r\n\r\n        this._isMounted && await this.props.makeRequest(request.Me.get, {}, {message: MESSAGES.LOGGING}).then(\r\n            (res) => {\r\n                if (res.data) {\r\n                    this.setState({\r\n                        username: res.data.username,\r\n                        email: res.data.email,\r\n                        firstName: res.data.first_name,\r\n                        lastName: res.data.last_name,\r\n                        contactNumber: res.data.contact_number,\r\n                        profilePicture: res.data.profile_pic,\r\n                        editMode: \"done\"\r\n                    });\r\n                }\r\n                this.setState({isLoading: false});\r\n            },\r\n            (errorData) => {\r\n                this.setState({isLoading: false});\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    resetFields() {\r\n        this.setState({\r\n            username: \"\",\r\n            email: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            contactNumber: \"\",\r\n            profilePicture: \"\",\r\n        })\r\n    }\r\n\r\n    handleChange(e) {\r\n        if (e.target && e.target.name) {\r\n            this.setState({\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSubmit(event, errors, values) {\r\n        event.preventDefault();\r\n        if (errors.length > 0) {\r\n            return;\r\n        }\r\n\r\n        const {\r\n            username, email, firstName, lastName, contactNumber, password, confirmPassword,\r\n            profilePicture, profilePictureFile\r\n        } = this.state;\r\n\r\n        const data = {\r\n            username: username ? username : undefined,\r\n            email: email ? email : undefined,\r\n            first_name: firstName ? firstName : undefined,\r\n            last_name: lastName ? lastName : undefined,\r\n            password: password ? password : undefined,\r\n            password_confirmation: confirmPassword ? confirmPassword : undefined,\r\n            contact_number: contactNumber ? contactNumber : undefined,\r\n            profile_picture: profilePictureFile && profilePicture ? profilePicture : undefined,\r\n        };\r\n\r\n        this.setState({isLoading: true});\r\n        this.props.makeRequest(request.Me.updateProfile, data, {message: MESSAGES.LOGGING}).then(\r\n            (responseData) => {\r\n                if (responseData.data) {\r\n                    this.props.setUser(responseData.data);\r\n                }\r\n                this.props.history.push(\"/my/profile\");\r\n            },\r\n            (errorData) => {\r\n                this.setState({error: errorData.message});\r\n                this.setState({isLoading: false});\r\n            }\r\n        );\r\n    }\r\n\r\n    handleSwitch(field) {\r\n        this.setState({\r\n            [field]: !this.state[field]\r\n        });\r\n    }\r\n\r\n    handleImageLoaded() {\r\n        this.setState({\r\n            editMode: \"crop\"\r\n        })\r\n    }\r\n\r\n    handleClick(state) {\r\n        let node = this[state];\r\n        this.setState({\r\n            profilePicture: node.crop(),\r\n            editMode: \"done\"\r\n        })\r\n    }\r\n\r\n    handleImageChange(e) {\r\n        e.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n\r\n        reader.onloadend = () => {\r\n            this.setState({\r\n                profilePictureFile: file,\r\n                profilePicture: reader.result,\r\n                editMode: \"crop\"\r\n            });\r\n        };\r\n\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            username, email, firstName, lastName, contactNumber,\r\n            profilePicture, isLoading, editMode, password, confirmPassword\r\n        } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\">Edit Profile</div>\r\n                                <div className=\"card-body\">\r\n                                    <AvForm onSubmit={this.handleSubmit} model={this.state}>\r\n                                        <Row form>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        {\r\n                                                            editMode === \"crop\" &&\r\n                                                            <div style={{width: '300px'}}>\r\n                                                                <Cropper src={profilePicture}\r\n                                                                         ref={ref => {\r\n                                                                             this.image = ref\r\n                                                                         }}\r\n                                                                         onImgLoad={() => this.handleImageLoaded()}\r\n                                                                />\r\n\r\n                                                                <div className=\"divider\"/>\r\n\r\n                                                                <div className=\"text-center\">\r\n                                                                    <Button color=\"primary\"\r\n                                                                            onClick={() => this.handleClick('image')}\r\n                                                                    >\r\n                                                                        Crop\r\n                                                                    </Button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        }\r\n\r\n                                                        {\r\n                                                            editMode === \"done\" &&\r\n                                                            <Col md={6}>\r\n                                                                <img\r\n                                                                    className=\"after-img rounded\"\r\n                                                                    src={profilePicture}\r\n                                                                    alt=\"\"\r\n                                                                    style={{width: '150px'}}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        }\r\n                                                        <AvField name=\"profilePicture\"\r\n                                                                 type=\"file\"\r\n                                                                 placeholder=\"Profile Picture\"\r\n                                                                 onChange={(e) => this.handleImageChange(e)}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"username\"\r\n                                                                 label=\"Username\"\r\n                                                                 type=\"text\"\r\n                                                                 placeholder=\"Username...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={username}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"email\"\r\n                                                                 label=\"Email\"\r\n                                                                 type=\"email\"\r\n                                                                 placeholder=\"Email here...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={email}\r\n                                                                 validate={{\r\n                                                                     email: {\r\n                                                                         value: true,\r\n                                                                         errorMessage: 'Please enter a valid email address'\r\n                                                                     },\r\n                                                                     required: {\r\n                                                                         value: true,\r\n                                                                         errorMessage: 'Please enter an email address'\r\n                                                                     }\r\n                                                                 }}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"firstName\"\r\n                                                                 label=\"First Name\"\r\n                                                                 type=\"text\"\r\n                                                                 placeholder=\"First Name ...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={firstName}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"lastName\"\r\n                                                                 label=\"Last Name\"\r\n                                                                 type=\"text\"\r\n                                                                 placeholder=\"Last Name ...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={lastName}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"contactNumber\"\r\n                                                                 label=\"Contact Number\"\r\n                                                                 type=\"text\"\r\n                                                                 placeholder=\"Contact Number ...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={contactNumber}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"password\"\r\n                                                                 label=\"New Password\"\r\n                                                                 type=\"password\"\r\n                                                                 placeholder=\"Enter your password...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={password}\r\n                                                                 validate={{\r\n                                                                     minLength: {\r\n                                                                         value: 6,\r\n                                                                         errorMessage: 'Your name must be at least 6 characters'\r\n                                                                     },\r\n                                                                 }}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <AvGroup>\r\n                                                        <AvField name=\"confirmPassword\"\r\n                                                                 label=\"Confirm New Password\"\r\n                                                                 type=\"password\"\r\n                                                                 placeholder=\"Confirm your password...\"\r\n                                                                 onChange={this.handleChange}\r\n                                                                 value={confirmPassword}\r\n                                                                 validate={{\r\n                                                                     match: {\r\n                                                                         value: 'password',\r\n                                                                         errorMessage: 'Password and Confirm Password must match'\r\n                                                                     },\r\n                                                                 }}\r\n                                                        />\r\n                                                    </AvGroup>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n\r\n\r\n                                        </Row>\r\n                                        <Row className=\"divider\"/>\r\n                                        <div className=\"d-flex align-items-center\">\r\n                                            <Button className=\"popup-btn register-btn\">Update Profile</Button>\r\n                                        </div>\r\n                                    </AvForm>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        lottery: state.lotteryReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot, setUser\r\n})(EditProfile));","import React, {Component, Fragment, Suspense} from 'react'\r\nimport {Link, Route, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeRequest} from \"../../../actions/requestAction\";\r\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\r\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\r\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\r\nimport Loader from 'react-loaders';\r\nimport ViewProfile from \"./ViewProfile\";\r\nimport EditProfile from \"./EditProfile\";\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <AnimatedSection>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 mb-md-4\">\r\n                            <Suspense fallback={\r\n                                <div className=\"loader-container\">\r\n                                    <div className=\"loader-container-inner\">\r\n                                        <div className=\"text-center\">\r\n                                            <Loader type=\"ball-grid-beat\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            }>\r\n                                <Route exact path={`/my/profile`} render={() => <ViewProfile {...this.props}/>}/>\r\n                                <Route path={`/my/profile/edit`} render={() => <EditProfile {...this.props}/>}/>\r\n                            </Suspense>\r\n                        </div>\r\n                    </div>\r\n                </AnimatedSection>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        auth: state.authReducer,\r\n        appStatus: state.appStatusReducer,\r\n        lottery: state.lotteryReducer\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\r\n})(Profile));","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Nav} from \"reactstrap\";\r\n\r\nconst DashboardMenu = (props) => {\r\n    return (\r\n        <div className=\"winners-table dashboard-wrap card\">\r\n            <div className=\"card-header\">Menu</div>\r\n            <div className=\"card-body\">\r\n                <Nav className=\"my-menu\">\r\n                    <NavLink exact={true} activeClassName='is-active'\r\n                             to='/my/dashboard'>Dashbaord</NavLink>\r\n                    <NavLink exact={true} activeClassName='is-active' to='/my/profile'>profile</NavLink>\r\n                    <NavLink exact={true} activeClassName='is-active' to='/my/wallet'>Wallet</NavLink>\r\n                    <NavLink exact={true} activeClassName='is-active'\r\n                             to='/my/transactions'>Transactions</NavLink>\r\n                    <NavLink exact={true} activeClassName='is-active'\r\n                             to='/my/played-games'>Played Games</NavLink>\r\n                    <NavLink exact={true} activeClassName='is-active' to='/my/withdraw'>Withdraw</NavLink>\r\n                </Nav>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DashboardMenu;","import React, {Component} from 'react'\r\nimport Dashboard from \"./Dashboard\";\r\nimport Wallet from \"./Wallet\";\r\nimport Transactions from \"./Transactions\";\r\nimport Withdraw from \"./Withdraw\";\r\nimport PlayedGames from \"./PlayedGames\";\r\nimport Profile from \"./Profile\";\r\nimport withLayout from \"../HOC/withLayout\";\r\nimport DashboardMenu from \"../AppCommon/DashboardMenu\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\n\r\nclass My extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            path: \"/my/dashboard\"\r\n        };\r\n\r\n        this.playLottery = this.playLottery.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            path: this.props.match.path\r\n        });\r\n    }\r\n\r\n    playLottery() {\r\n        const {isAuthenticated} = this.props.auth;\r\n\r\n        // check if authenticated\r\n        if (! isAuthenticated) {\r\n            this.props.setModal('login');\r\n            return;\r\n        }\r\n\r\n        this.props.setModal('playLottery');\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        // Return to root url when unauthenticated\r\n        const {isAuthenticated} = this.props.auth;\r\n\r\n        if (! isAuthenticated ) {\r\n            this.props.history.push('/');\r\n        }\r\n\r\n        return (\r\n            <div className=\"section-bottom\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-4 col-lg-3\">\r\n                            <DashboardMenu/>\r\n                        </div>\r\n                        <div className=\"col-sm-12 col-md-8 col-lg-9\">\r\n                            <Route path={`/my/dashboard`} render={() => <Dashboard{...this.props}/>}/>\r\n                            <Route path={`/my/wallet`} render={() => <Wallet {...this.props}/>}/>\r\n                            <Route path={`/my/transactions`} render={() => <Transactions {...this.props}/>}/>\r\n                            <Route path={`/my/withdraw`} render={() => <Withdraw {...this.props}/>}/>\r\n                            <Route path={`/my/played-games`} render={() => <PlayedGames {...this.props}/>}/>\r\n                            <Route path={`/my/profile/:slug?`} render={() => <Profile {...this.props}/>}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withLayout(My);"],"sourceRoot":""}