{"version":3,"sources":["Components/AppCommon/AnimatedSection.js","Components/My/Dashboard/index.js","Components/My/Wallet/index.js","Components/My/Transactions/index.js","Components/My/Withdraw/index.js","Components/My/PlayedGames/index.js","Components/My/Profile/ViewProfile.js","Components/My/Profile/EditProfile.js","Components/My/Profile/index.js","Components/AppCommon/DashboardMenu.js","Components/My/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_addons_css_transition_group__WEBPACK_IMPORTED_MODULE_1__","react_addons_css_transition_group__WEBPACK_IMPORTED_MODULE_1___default","AnimatedSection","props","a","createElement","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","children","Dashboard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","bootstrap","_this2","setState","makeRequest","request","Me","getPlayedGames","message","MESSAGES","LOGGING","then","res","data","setPlayedGames","errorData","getTransactions","setTransactions","user","auth","wallet","_this$props$my","my","playedGames","transactions","react_default","react","className","free_games","bitsToCoin","deposit","bitsToBtc","won","es","columns","Header","accessor","Cell","original","lottery_slot","slot_ref","LotteryNumberList","ulClass","numbers","lottery_number","result","won_amount","defaultPageSize","showPagination","react_router_dom","to","getTitleFromSlug","type","amount","currency","parseFloat","toFixed","React","Component","Wallet","pending_withdraw","id","full_name","created_at","updated_at","withRouter","connect","authReducer","appStatus","appStatusReducer","lottery","lotteryReducer","setLotteryWinners","setLotterySlot","setLotteryPlayers","setSettings","setCurrencies","setLastSlot","Transactions","myReducer","Withdraw","error","getWithdrawRequests","bind","assertThisInitialized","cancelWithdrawRequest","resetFields","handleChange","handleWithdraw","setWithdrawRequests","_this3","get","setUser","_this4","e","defineProperty","target","name","value","_this5","preventDefault","btcToBits","createWithdrawRequest","responseData","getUserInfo","_this6","withdrawRequests","onSubmit","placeholder","onChange","status","onClick","PlayedGames","handleClick","handleNumberClick","ViewProfile","setModal","src","profile_pic","alt","username","nickname","email","contact_number","verified","href","showVerificationModal","EditProfile","firstName","lastName","contactNumber","password","confirmPassword","profilePictureFile","profilePicture","files","editMode","handleSubmit","handleSwitch","handleImageLoaded","handleImageChange","_isMounted","first_name","last_name","event","errors","values","length","_this$state","undefined","password_confirmation","profile_picture","updateProfile","history","push","field","node","crop","reader","FileReader","file","onloadend","readAsDataURL","_this$state2","lib","model","Row","form","Col","md","FormGroup","style","width","react_image_cropper","ref","image","onImgLoad","Button","color","label","validate","errorMessage","required","minLength","match","Profile","fallback","react_loaders_default","react_router","exact","path","render","Profile_ViewProfile","Profile_EditProfile","DashboardMenu","Nav","activeClassName","My","playLottery","isAuthenticated","AppCommon_DashboardMenu","My_Dashboard","My_Wallet","My_Transactions","My_Withdraw","My_PlayedGames","My_Profile","withLayout"],"mappings":"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","file":"static/js/7.df7d1a33.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nconst AnimatedSection = (props) =>  {\n    return (\n        <ReactCSSTransitionGroup\n            transitionName=\"animated-section\"\n            transitionAppear={true}\n            transitionAppearTimeout={500}\n            transitionEnter={false}\n            transitionLeave={false}>\n            { props.children }\n        </ReactCSSTransitionGroup>\n    )\n};\n\nexport default AnimatedSection;","import React, {Fragment} from 'react'\nimport {Link, withRouter} from \"react-router-dom\";\nimport {bitsToCoin, bitsToBtc, getTitleFromSlug} from \"../../../utils/helper/helperFunctions\";\nimport request from \"../../../services/request\";\nimport {MESSAGES} from \"../../../constants/messages\";\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: false\n        }\n    }\n\n    componentDidMount() {\n        this.bootstrap();\n    }\n\n    bootstrap() {\n        // Get Played Games\n        this.setState({isLoading: true});\n        this.props.makeRequest(request.Me.getPlayedGames, {}, {message: MESSAGES.LOGGING}).then(\n            (res) => { if (res.data) { this.props.setPlayedGames(res); this.setState({isLoading: false}); } },\n            (errorData) => {}\n        );\n        // Get Transactions\n        this.setState({isLoading: true});\n        this.props.makeRequest(request.Me.getTransactions, {}, {message: MESSAGES.LOGGING}).then(\n            (res) => { if (res.data) { this.props.setTransactions(res); this.setState({isLoading: false}); } },\n            (errorData) => {}\n        );\n    }\n\n    render() {\n        const {isLoading} = this.state;\n        const {user} = this.props.auth;\n        const {wallet} = user;\n        const {playedGames, transactions} = this.props.my;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Free Games</div>\n                                <div className=\"card-body\">{ user && user.free_games }</div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Deposit</div>\n                                <div className=\"card-body\">{ wallet && bitsToCoin(wallet.deposit) }</div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Won</div>\n                                <div className=\"card-body\">{ wallet && bitsToBtc(wallet.won) }</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card responsive-width\">\n                                <div className=\"card-header\">Latest Played Games</div>\n                                {\n                                    playedGames && playedGames.data ?\n                                        <div>\n                                            <div className=\"card-body\">\n                                                <ReactTable\n                                                    data={playedGames.data}\n                                                    columns={[\n                                                        {\n                                                            columns: [\n                                                                {\n                                                                    Header: 'Slot Ref',\n                                                                    accessor: 'slot_ref',\n                                                                    Cell: props => (\n                                                                        <div>\n                                                                            { props.original.lottery_slot.slot_ref }\n                                                                        </div>\n                                                                    )\n                                                                },\n                                                                {\n                                                                    Header: 'Lottery Number',\n                                                                    Cell: props => (\n                                                                        <div>\n                                                                            <LotteryNumberList\n                                                                                ulClass=\"number-in-column\"\n                                                                                numbers={props.original.lottery_number}\n                                                                            />\n                                                                        </div>\n                                                                    )\n                                                                },\n                                                                {\n                                                                    Header: 'Winning Number',\n                                                                    accessor: 'result',\n                                                                    Cell: props => (\n                                                                        <div>\n                                                                            <LotteryNumberList\n                                                                                ulClass=\"number-in-column\"\n                                                                                numbers={props.original.lottery_slot.result}\n                                                                            />\n                                                                        </div>\n                                                                    )\n                                                                },\n                                                                {\n                                                                    Header: 'Won',\n                                                                    accessor: 'won_amount',\n                                                                    Cell: props => (\n                                                                        <div>\n                                                                            { bitsToBtc(props.original.won_amount) }\n                                                                        </div>\n                                                                    )\n                                                                }\n                                                            ]\n                                                        },\n                                                    ]}\n                                                    defaultPageSize={5}\n                                                    showPagination={false}\n                                                    className=\"-striped -highlight\"\n                                                />\n                                            </div>\n                                            <div className=\"card-footer\">\n                                                <div className=\"text-center\">\n                                                    <Link to=\"/my/played-games\">View all</Link>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        :\n                                        <div className=\"card-body\">You have not played any games.</div>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card responsive-width\">\n                                <div className=\"card-header\">Latest Transactions</div>\n                                {\n                                    transactions && transactions.data ?\n                                        <div>\n                                            <div className=\"card-body\">\n                                                <ReactTable\n                                                    data={transactions.data}\n                                                    columns={[\n                                                        {\n                                                            columns: [\n                                                                {\n                                                                    Header: 'Transaction Code',\n                                                                    accessor: 'transaction_code',\n                                                                },\n                                                                {\n                                                                    Header: 'Type',\n                                                                    accessor: 'type',\n                                                                    Cell: props => (\n                                                                        <div>{ getTitleFromSlug(props.original.type) }</div>\n                                                                    )\n                                                                },\n                                                                {\n                                                                    Header: 'Amount',\n                                                                    accessor: 'amount',\n                                                                    Cell: props => (\n                                                                        <div>\n                                                                            {\n                                                                                props.original.deposit && props.original.deposit.amount && props.original.deposit.currency ?\n                                                                                    parseFloat((props.original.deposit.amount * 1).toFixed(6)) + ' ' + props.original.deposit.currency\n                                                                                    :\n                                                                                    bitsToBtc(props.original.amount)\n\n                                                                            }\n                                                                        </div>\n                                                                    )\n                                                                },\n                                                                {\n                                                                    Header: 'Date',\n                                                                    accessor: 'updated_at'\n                                                                }\n                                                            ]\n                                                        },\n                                                    ]}\n                                                    defaultPageSize={5}\n                                                    showPagination={false}\n                                                    className=\"-striped -highlight\"\n                                                />\n                                            </div>\n                                            <div className=\"card-footer\">\n                                                <div className=\"text-center\">\n                                                    <Link to=\"/my/transactions\">View all</Link>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        :\n                                        <div className=\"card-body\">You have not made any transactions.</div>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nexport default Dashboard;","import React, {Component, Fragment} from 'react'\nimport PropTypes from \"prop-types\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\nimport {bitsToCoin, bitsToBtc} from \"../../../utils/helper/helperFunctions\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\n\nclass Wallet extends Component {\n\n    render() {\n        const {user} = this.props.auth;\n        const {wallet} = user;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-4 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Pending Withdraw</div>\n                                <div className=\"card-body\">{ bitsToBtc(wallet && wallet.pending_withdraw) }</div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Deposit</div>\n                                <div className=\"card-body\">{ wallet && bitsToCoin(wallet.deposit) }</div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Won</div>\n                                <div className=\"card-body\">{ wallet && bitsToBtc(wallet.won) }</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Wallet Info</div>\n                                <div className=\"card-body\">\n                                    <ul className=\"list-group list-group-flush\">\n                                        <li className=\"list-group-item\"><strong>ID: </strong> { wallet.id}</li>\n                                        <li className=\"list-group-item\"><strong>Owner: </strong> { user.full_name }</li>\n                                        <li className=\"list-group-item\"><strong>Pending Withdraw: </strong> { bitsToBtc(wallet.pending_withdraw) }</li>\n                                        <li className=\"list-group-item\"><strong>Deposit: </strong> { bitsToCoin(wallet.deposit) }</li>\n                                        <li className=\"list-group-item\"><strong>Won: </strong> { bitsToBtc(wallet.won) }</li>\n                                        <li className=\"list-group-item\"><strong>Created on: </strong> { wallet.created_at }</li>\n                                        <li className=\"list-group-item\"><strong>Last Updated on: </strong> { wallet.updated_at }</li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nWallet.propTypes = {\n    makeRequest: PropTypes.func.isRequired,\n};\n\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        lottery: state.lotteryReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\n})(Wallet));","import React, {Component, Fragment} from 'react'\nimport PropTypes from \"prop-types\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\nimport ReactTable from \"react-table\";\nimport {bitsToBtc, getTitleFromSlug} from \"../../../utils/helper/helperFunctions\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\n\nclass Transactions extends Component {\n\n    render() {\n        const {transactions} = this.props.my;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Transactions</div>\n                                <div className=\"card-body\">\n                                    {\n                                        transactions && transactions.data ?\n                                            <div>\n                                                <div className=\"card-body custom-padding\">\n                                                    <ReactTable\n                                                        data={transactions.data}\n                                                        columns={[\n                                                            {\n                                                                columns: [\n                                                                    \n                                                                    {\n                                                                        Header: 'Date',\n                                                                        accessor: 'updated_at'\n                                                                    },\n                                                                    {\n                                                                        Header: 'Transaction Code',\n                                                                        accessor: 'transaction_code',\n                                                                    },\n                                                                    {\n                                                                        Header: 'Type',\n                                                                        accessor: 'type',\n                                                                        Cell: props => (\n                                                                            <div>{ getTitleFromSlug(props.original.type) }</div>\n                                                                        )\n                                                                    },\n                                                                    {\n                                                                        Header: 'Amount',\n                                                                        accessor: 'amount',\n                                                                        Cell: props => (\n                                                                            <div>\n                                                                                {\n                                                                                    props.original.deposit && props.original.deposit.amount && props.original.deposit.currency ?\n                                                                                        parseFloat((props.original.deposit.amount * 1).toFixed(6)) + ' ' + props.original.deposit.currency\n                                                                                        :\n                                                                                        bitsToBtc(props.original.amount)\n\n                                                                                }\n                                                                            </div>\n                                                                        )\n                                                                    }\n                                                                ]\n                                                            },\n                                                        ]}\n                                                        defaultPageSize={15}\n                                                        showPagination={true}\n                                                        className=\"-striped -highlight\"\n                                                    />\n                                                </div>\n                                            </div>\n                                            :\n                                            <div className=\"card-body\">You have not made any transactions.</div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nTransactions.propTypes = {\n    makeRequest: PropTypes.func.isRequired,\n};\n\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        my: state.myReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\n})(Transactions));","import React, {Component, Fragment} from 'react'\nimport PropTypes from \"prop-types\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\nimport request from \"../../../services/request\";\nimport {MESSAGES} from \"../../../constants/messages\";\nimport {setWithdrawRequests} from \"../../../actions/myActions\";\nimport ReactTable from \"react-table\";\nimport {bitsToCoin, bitsToBtc, btcToBits} from \"../../../utils/helper/helperFunctions\";\nimport {setUser} from \"../../../actions/authActions\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\n\nclass Withdraw extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: false,\n            amount: \"\",\n            error: \"\",\n        };\n\n        this.getWithdrawRequests = this.getWithdrawRequests.bind(this);\n        this.cancelWithdrawRequest = this.cancelWithdrawRequest.bind(this);\n        this.resetFields = this.resetFields.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleWithdraw = this.handleWithdraw.bind(this);\n    }\n\n    componentDidMount() {\n        this.bootstrap();\n    }\n\n    bootstrap() {\n        // Get Withdraw Requests\n        this.setState({isLoading: true});\n        this.getWithdrawRequests();\n    }\n\n    getWithdrawRequests() {\n        this.props.makeRequest(request.Me.getWithdrawRequests, {}, {message: MESSAGES.LOGGING}).then(\n            (res) => { if (res.data) { this.props.setWithdrawRequests(res); this.setState({isLoading: false}); } },\n            (errorData) => {}\n        );\n    }\n\n    getUserInfo() {\n        this.props.makeRequest(request.Me.get, {}, {message: MESSAGES.LOGGING}).then(\n            (res) => {\n                this.props.setUser(res.data);\n                this.setState({ isLoading: false });\n            },\n            (errorData) => {\n                this.setState({isLoading: false});\n            }\n        );\n    }\n\n    cancelWithdrawRequest(id) {\n        this.props.makeRequest(request.Me.cancelWithdrawRequest, {id: id}, {message: MESSAGES.LOGGING}).then(\n            (res) => { if (res.data) { this.getWithdrawRequests(); this.setState({isLoading: false}); } },\n            (errorData) => {}\n        );\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleWithdraw(e) {\n        e.preventDefault();\n\n        const {wallet} = this.props.auth.user;\n        if (this.state.amount <= 0) {\n            this.setState({\n                error: \"Please enter valid amount\"\n            });\n            return;\n        }\n\n        if (btcToBits(this.state.amount, false) > wallet.won) {\n            this.setState({\n                error: \"Amount cannot be greater than available balance\"\n            });\n            return;\n        }\n\n        const data = {\n            amount: btcToBits(this.state.amount, false)\n        };\n\n        this.setState({isLoading: true});\n        this.props.makeRequest(request.Me.createWithdrawRequest, data, {message: MESSAGES.LOGGING}).then(\n            (responseData) => {\n                this.getUserInfo();\n                this.getWithdrawRequests();\n                this.resetFields();\n                this.setState({isLoading: false});\n            },\n            (errorData) => {\n                this.resetFields();\n                this.setState({error: errorData.message});\n                this.setState({isLoading: false});\n            }\n        );\n    }\n\n    resetFields() {\n        this.setState({\n            amount: \"\",\n            error: \"\"\n        })\n    }\n\n    render() {\n        const {withdrawRequests} = this.props.my;\n        const {wallet} = this.props.auth.user;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Withdraw</div>\n                                <div className=\"card-body\">\n                                    <p>Available Balance: <strong>{wallet && bitsToBtc(wallet.won)}</strong></p>\n                                    <form className=\"withdraw-form\" onSubmit={this.handleWithdraw}>\n                                        <div className=\"input-group\">\n                                            <input name=\"amount\" type=\"text\" className=\"form-control\" placeholder=\"0.00\"\n                                                   onChange={this.handleChange}\n                                                   value={this.state.amount}\n                                            />\n                                            <div className=\"input-group-append\">\n                                                <span className=\"input-group-text\">BTC</span>\n                                            </div>\n                                        </div>\n                                        <div>\n                                            { this.state.error && <span className=\"text text-danger\">{ this.state.error }</span>}\n                                        </div>\n                                        <div className=\"btn-group\">\n                                            <button className=\"btn btn-primary btn-black\">Withdraw</button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Withdraw Requests</div>\n                                <div className=\"card-body\">\n                                    <ReactTable\n                                        data={withdrawRequests.data}\n                                        columns={[\n                                            {\n                                                columns: [\n                                                    {\n                                                        Header: 'Created On',\n                                                        accessor: 'created_at',\n                                                    },\n                                                    {\n                                                        Header: 'Amount',\n                                                        accessor: 'amount',\n                                                        Cell: props => (\n                                                            <div>\n                                                                { bitsToBtc(props.original.amount) }\n                                                            </div>\n                                                        )\n                                                    },\n                                                    {\n                                                        Header: 'Status',\n                                                        accessor: 'status'\n                                                    },\n                                                    {\n                                                        Header: 'Action',\n                                                        accessor: 'action',\n                                                        Cell: props => (\n                                                            <div>\n                                                                {\n                                                                    props.original.status === 'pending' &&\n                                                                    <button onClick={() => this.cancelWithdrawRequest(props.original.id)}>Cancel</button>\n                                                                }\n                                                            </div>\n                                                        )\n                                                    },\n                                                ]\n                                            },\n                                        ]}\n                                        defaultPageSize={10}\n                                        showPagination={true}\n                                        className=\"-striped -highlight\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nWithdraw.propTypes = {\n    makeRequest: PropTypes.func.isRequired,\n};\n\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        my: state.myReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot,\n    setWithdrawRequests, setUser\n})(Withdraw));","import React, {Component, Fragment} from 'react';\nimport ReactTable from \"react-table\";\nimport {bitsToBtc} from \"../../../utils/helper/helperFunctions\";\nimport LotteryNumberList from \"../../AppCommon/LotteryNumberList\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\n\nclass PlayedGames extends Component {\n\n    render() {\n        const {playedGames} = this.props.my;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Played Games</div>\n                                <div className=\"card-body\">\n                                    {\n                                        playedGames && playedGames.data ?\n                                            <div>\n                                                <div className=\"card-body custom-padding played-games-data responsive-width\">\n                                                    <ReactTable\n                                                        data={playedGames.data}\n                                                        columns={[\n                                                            {\n                                                                columns: [\n                                                                    {\n                                                                        Header: 'Slot Ref',\n                                                                        accessor: 'slot_ref',\n                                                                        Cell: props => (\n                                                                            <div>\n                                                                                { props.original.lottery_slot.slot_ref }\n                                                                            </div>\n                                                                        )\n                                                                    },\n                                                                    {\n                                                                        Header: 'Lottery Number',\n                                                                        accessor: 'lottery_number',\n                                                                        Cell: props => (\n                                                                            <div>\n                                                                                <LotteryNumberList\n                                                                                    ulClass=\"number-in-column\"\n                                                                                    numbers={props.original.lottery_number}\n                                                                                />\n                                                                            </div>\n                                                                        )\n                                                                    },\n                                                                    {\n                                                                        Header: 'Winning Number',\n                                                                        accessor: 'result',\n                                                                        Cell: props => (\n                                                                            <div>\n                                                                                <LotteryNumberList\n                                                                                    ulClass=\"number-in-column\"\n                                                                                    numbers={props.original.lottery_slot.result}\n                                                                                    handleClick={this.handleNumberClick}\n                                                                                />\n                                                                            </div>\n                                                                        )\n                                                                    },\n                                                                    {\n                                                                        Header: 'Won',\n                                                                        accessor: 'won_amount',\n                                                                        Cell: props => (\n                                                                            <div>\n                                                                                { bitsToBtc(props.original.won_amount) }\n                                                                            </div>\n                                                                        )\n                                                                    }\n                                                                ]\n                                                            },\n                                                        ]}\n                                                        defaultPageSize={15}\n                                                        showPagination={true}\n                                                        className=\"-striped -highlight\"\n                                                    />\n                                                </div>\n                                            </div>\n                                            :\n                                            <div className=\"card-body\">You have not played any games.</div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\n\nexport default PlayedGames;","import React, {Component, Fragment} from 'react'\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\nimport {setCurrencies, setModal, setSettings} from \"../../../actions/appStatusAction\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\n\nclass ViewProfile extends Component {\n    showVerificationModal() {\n        this.props.setModal('verify');\n    }\n\n    render() {\n        const {user} = this.props.auth;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card my-profile\">\n                                <div className=\"card-header\">Profile</div>\n                                <div className=\"card-body\">\n                                    <img className=\"card-img-top img-profile\" src={user.profile_pic} alt=\"Profile picture\" />\n                                    <ul className=\"list-group list-group-flush\">\n                                        <li className=\"list-group-item\"><strong>Username: </strong> { user.username }</li>\n                                        <li className=\"list-group-item\"><strong>Nickname: </strong> { user.nickname }</li>\n                                        <li className=\"list-group-item\"><strong>Name: </strong> { user.full_name }</li>\n                                        <li className=\"list-group-item\"><strong>Email: </strong> { user.email }</li>\n                                        <li className=\"list-group-item\"><strong>Contact No: </strong> { user.contact_number }</li>\n                                        <li className=\"list-group-item\">\n                                            <strong>Status: </strong> { user.verified ? <span className=\"text-success\">Verified</span> : <span className=\"text-danger\">Un-verified</span> }\n                                            { !user.verified && <a href=\"javascript:void(0);\" onClick={() => this.showVerificationModal()} className=\"btn-link\">Verify Now</a> }\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <div className=\"text-center\">\n                                        <Link to=\"/my/profile/edit\">Edit</Link>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        lottery: state.lotteryReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot,\n    setModal,\n})(ViewProfile));","import React, {Component, Fragment} from 'react'\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\nimport request from \"../../../services/request\";\nimport {MESSAGES} from \"../../../constants/messages\";\nimport {AvField, AvForm, AvGroup} from \"availity-reactstrap-validation\";\nimport {Button, Col, FormGroup, Row} from \"reactstrap\";\nimport {Cropper} from \"react-image-cropper\";\nimport {setUser} from \"../../../actions/authActions\";\n\nclass EditProfile extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            nickname: \"\",\n            email: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            contactNumber: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            profilePictureFile: \"\",\n            profilePicture: \"\",\n            error: \"\",\n            isLoading: false,\n            files: [],\n            editMode: \"pick\", // pick | crop | done\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSwitch = this.handleSwitch.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleImageLoaded = this.handleImageLoaded.bind(this);\n        this.handleImageChange = this.handleImageChange.bind(this);\n    }\n\n    async componentDidMount() {\n        this._isMounted = true;\n\n        this.setState({isLoading: true});\n\n        this._isMounted && await this.props.makeRequest(request.Me.get, {}, {message: MESSAGES.LOGGING}).then(\n            (res) => {\n                if (res.data) {\n                    this.setState({\n                        username: res.data.username,\n                        nickname: res.data.nickname,\n                        email: res.data.email,\n                        firstName: res.data.first_name,\n                        lastName: res.data.last_name,\n                        contactNumber: res.data.contact_number,\n                        profilePicture: res.data.profile_pic,\n                        editMode: \"done\"\n                    });\n                }\n                this.setState({isLoading: false});\n            },\n            (errorData) => {\n                this.setState({isLoading: false});\n            }\n        );\n\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    resetFields() {\n        this.setState({\n            username: \"\",\n            nickname: \"\",\n            email: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            contactNumber: \"\",\n            profilePicture: \"\",\n        })\n    }\n\n    handleChange(e) {\n        if (e.target && e.target.name) {\n            this.setState({\n                [e.target.name]: e.target.value\n            });\n        }\n    }\n\n    handleSubmit(event, errors, values) {\n        event.preventDefault();\n        if (errors.length > 0) {\n            return;\n        }\n\n        const {\n            username, nickname, email, firstName, lastName, contactNumber, password, confirmPassword,\n            profilePicture, profilePictureFile\n        } = this.state;\n\n        const data = {\n            username: username ? username : undefined,\n            nickname: nickname ? nickname : undefined,\n            email: email ? email : undefined,\n            first_name: firstName ? firstName : undefined,\n            last_name: lastName ? lastName : undefined,\n            password: password ? password : undefined,\n            password_confirmation: confirmPassword ? confirmPassword : undefined,\n            contact_number: contactNumber ? contactNumber : undefined,\n            profile_picture: profilePictureFile && profilePicture ? profilePicture : undefined,\n        };\n\n        this.setState({isLoading: true});\n        this.props.makeRequest(request.Me.updateProfile, data, {message: MESSAGES.LOGGING}).then(\n            (responseData) => {\n                if (responseData.data) {\n                    this.props.setUser(responseData.data);\n                }\n                this.props.history.push(\"/my/profile\");\n            },\n            (errorData) => {\n                this.setState({error: errorData.message});\n                this.setState({isLoading: false});\n            }\n        );\n    }\n\n    handleSwitch(field) {\n        this.setState({\n            [field]: !this.state[field]\n        });\n    }\n\n    handleImageLoaded() {\n        this.setState({\n            editMode: \"crop\"\n        })\n    }\n\n    handleClick(state) {\n        let node = this[state];\n        this.setState({\n            profilePicture: node.crop(),\n            editMode: \"done\"\n        })\n    }\n\n    handleImageChange(e) {\n        e.preventDefault();\n\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            this.setState({\n                profilePictureFile: file,\n                profilePicture: reader.result,\n                editMode: \"crop\"\n            });\n        };\n\n        reader.readAsDataURL(file)\n    }\n\n    render() {\n        const {\n            username, nickname, email, firstName, lastName, contactNumber,\n            profilePicture, isLoading, editMode, password, confirmPassword\n        } = this.state;\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Edit Profile</div>\n                                <div className=\"card-body\">\n                                    <AvForm onSubmit={this.handleSubmit} model={this.state}>\n                                        <Row form>\n                                            <Col md={12}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        {\n                                                            editMode === \"crop\" &&\n                                                            <div style={{width: '300px'}}>\n                                                                <Cropper src={profilePicture}\n                                                                         ref={ref => {\n                                                                             this.image = ref\n                                                                         }}\n                                                                         onImgLoad={() => this.handleImageLoaded()}\n                                                                />\n\n                                                                <div className=\"divider\"/>\n\n                                                                <div className=\"text-center\">\n                                                                    <Button color=\"primary\"\n                                                                            onClick={() => this.handleClick('image')}\n                                                                    >\n                                                                        Crop\n                                                                    </Button>\n                                                                </div>\n                                                            </div>\n                                                        }\n\n                                                        {\n                                                            editMode === \"done\" &&\n                                                            <Col md={6}>\n                                                                <img\n                                                                    className=\"after-img rounded\"\n                                                                    src={profilePicture}\n                                                                    alt=\"\"\n                                                                    style={{width: '150px'}}\n                                                                />\n                                                            </Col>\n                                                        }\n                                                        <AvField name=\"profilePicture\"\n                                                                 type=\"file\"\n                                                                 placeholder=\"Profile Picture\"\n                                                                 onChange={(e) => this.handleImageChange(e)}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={6}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"username\"\n                                                                 label=\"Username\"\n                                                                 type=\"text\"\n                                                                 placeholder=\"Username...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={username}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={6}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"nickname\"\n                                                                 label=\"Nickname\"\n                                                                 type=\"text\"\n                                                                 placeholder=\"Nickname...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={nickname}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={12}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"email\"\n                                                                 label=\"Email\"\n                                                                 type=\"email\"\n                                                                 placeholder=\"Email here...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={email}\n                                                                 validate={{\n                                                                     email: {\n                                                                         value: true,\n                                                                         errorMessage: 'Please enter a valid email address'\n                                                                     },\n                                                                     required: {\n                                                                         value: true,\n                                                                         errorMessage: 'Please enter an email address'\n                                                                     }\n                                                                 }}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={6}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"firstName\"\n                                                                 label=\"First Name\"\n                                                                 type=\"text\"\n                                                                 placeholder=\"First Name ...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={firstName}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={6}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"lastName\"\n                                                                 label=\"Last Name\"\n                                                                 type=\"text\"\n                                                                 placeholder=\"Last Name ...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={lastName}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={12}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"contactNumber\"\n                                                                 label=\"Contact Number\"\n                                                                 type=\"text\"\n                                                                 placeholder=\"Contact Number ...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={contactNumber}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={6}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"password\"\n                                                                 label=\"New Password\"\n                                                                 type=\"password\"\n                                                                 placeholder=\"Enter your password...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={password}\n                                                                 validate={{\n                                                                     minLength: {\n                                                                         value: 6,\n                                                                         errorMessage: 'Your name must be at least 6 characters'\n                                                                     },\n                                                                 }}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col md={6}>\n                                                <FormGroup>\n                                                    <AvGroup>\n                                                        <AvField name=\"confirmPassword\"\n                                                                 label=\"Confirm New Password\"\n                                                                 type=\"password\"\n                                                                 placeholder=\"Confirm your password...\"\n                                                                 onChange={this.handleChange}\n                                                                 value={confirmPassword}\n                                                                 validate={{\n                                                                     match: {\n                                                                         value: 'password',\n                                                                         errorMessage: 'Password and Confirm Password must match'\n                                                                     },\n                                                                 }}\n                                                        />\n                                                    </AvGroup>\n                                                </FormGroup>\n                                            </Col>\n\n\n\n                                        </Row>\n                                        <Row className=\"divider\"/>\n                                        <div className=\"d-flex align-items-center\">\n                                            <Button className=\"popup-btn register-btn\">Update Profile</Button>\n                                        </div>\n                                    </AvForm>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        lottery: state.lotteryReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot, setUser\n})(EditProfile));","import React, {Component, Fragment, Suspense} from 'react'\nimport {Link, Route, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {makeRequest} from \"../../../actions/requestAction\";\nimport {setLastSlot, setLotteryPlayers, setLotterySlot, setLotteryWinners} from \"../../../actions/lotteryActions\";\nimport {setCurrencies, setSettings} from \"../../../actions/appStatusAction\";\nimport AnimatedSection from \"../../AppCommon/AnimatedSection\";\nimport Loader from 'react-loaders';\nimport ViewProfile from \"./ViewProfile\";\nimport EditProfile from \"./EditProfile\";\n\nclass Profile extends Component {\n    render() {\n        return (\n            <Fragment>\n                <AnimatedSection>\n                    <div className=\"row\">\n                        <div className=\"col-md-12 mb-md-4\">\n                            <Suspense fallback={\n                                <div className=\"loader-container\">\n                                    <div className=\"loader-container-inner\">\n                                        <div className=\"text-center\">\n                                            <Loader type=\"ball-grid-beat\"/>\n                                        </div>\n                                    </div>\n                                </div>\n                            }>\n                                <Route exact path={`/my/profile`} render={() => <ViewProfile {...this.props}/>}/>\n                                <Route path={`/my/profile/edit`} render={() => <EditProfile {...this.props}/>}/>\n                            </Suspense>\n                        </div>\n                    </div>\n                </AnimatedSection>\n            </Fragment>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        auth: state.authReducer,\n        appStatus: state.appStatusReducer,\n        lottery: state.lotteryReducer\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, {\n    makeRequest, setLotteryWinners, setLotterySlot, setLotteryPlayers, setSettings, setCurrencies, setLastSlot\n})(Profile));","import React from 'react'\nimport {NavLink} from \"react-router-dom\";\nimport {Nav} from \"reactstrap\";\n\nconst DashboardMenu = (props) => {\n    return (\n        <div className=\"winners-table dashboard-wrap card\">\n            <div className=\"card-header\">Menu</div>\n            <div className=\"card-body\">\n                <Nav className=\"my-menu\">\n                    <NavLink exact={true} activeClassName='is-active'\n                             to='/my/dashboard'>Dashbaord</NavLink>\n                    <NavLink exact={true} activeClassName='is-active' to='/my/profile'>profile</NavLink>\n                    <NavLink exact={true} activeClassName='is-active' to='/my/wallet'>Wallet</NavLink>\n                    <NavLink exact={true} activeClassName='is-active'\n                             to='/my/transactions'>Transactions</NavLink>\n                    <NavLink exact={true} activeClassName='is-active'\n                             to='/my/played-games'>Played Games</NavLink>\n                    <NavLink exact={true} activeClassName='is-active' to='/my/withdraw'>Withdraw</NavLink>\n                </Nav>\n            </div>\n        </div>\n    )\n};\n\nexport default DashboardMenu;","import React, {Component} from 'react'\nimport Dashboard from \"./Dashboard\";\nimport Wallet from \"./Wallet\";\nimport Transactions from \"./Transactions\";\nimport Withdraw from \"./Withdraw\";\nimport PlayedGames from \"./PlayedGames\";\nimport Profile from \"./Profile\";\nimport withLayout from \"../HOC/withLayout\";\nimport DashboardMenu from \"../AppCommon/DashboardMenu\";\nimport {Redirect, Route} from \"react-router-dom\";\n\nclass My extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            path: \"/my/dashboard\"\n        };\n\n        this.playLottery = this.playLottery.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            path: this.props.match.path\n        });\n    }\n\n    playLottery() {\n        const {isAuthenticated} = this.props.auth;\n\n        // check if authenticated\n        if (! isAuthenticated) {\n            this.props.setModal('login');\n            return;\n        }\n\n        this.props.setModal('playLottery');\n\n        this.props.history.push('/');\n    }\n\n    render() {\n        // Return to root url when unauthenticated\n        const {isAuthenticated} = this.props.auth;\n\n        if (! isAuthenticated ) {\n            this.props.history.push('/');\n        }\n\n        return (\n            <div className=\"section-bottom\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-md-4 col-lg-3\">\n                            <DashboardMenu/>\n                        </div>\n                        <div className=\"col-sm-12 col-md-8 col-lg-9\">\n                            <Route path={`/my/dashboard`} render={() => <Dashboard{...this.props}/>}/>\n                            <Route path={`/my/wallet`} render={() => <Wallet {...this.props}/>}/>\n                            <Route path={`/my/transactions`} render={() => <Transactions {...this.props}/>}/>\n                            <Route path={`/my/withdraw`} render={() => <Withdraw {...this.props}/>}/>\n                            <Route path={`/my/played-games`} render={() => <PlayedGames {...this.props}/>}/>\n                            <Route path={`/my/profile/:slug?`} render={() => <Profile {...this.props}/>}/>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withLayout(My);"],"sourceRoot":""}